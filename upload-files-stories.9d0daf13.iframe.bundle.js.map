{"version":3,"file":"upload-files-stories.9d0daf13.iframe.bundle.js","mappings":";;;;;;AAoIA;;AAGA;;ACrHA;;;;ACPA","sources":["webpack://@holochain-open-dev/file-storage-dev/../../src/elements/upload-files.ts","webpack://@holochain-open-dev/file-storage-dev/./stories/upload-files.stories.js","webpack://@holochain-open-dev/file-storage-dev/../../src/elements/file-storage-context.ts"],"sourcesContent":["import { html } from 'lit';\nimport { customElement, property, query } from 'lit/decorators.js';\n\nimport { DropzoneElement, DropzoneOptions } from '@scoped-elements/dropzone';\nimport { consume } from '@lit-labs/context';\nimport { FormField, FormFieldController } from '@holochain-open-dev/elements';\nimport { localized } from '@lit/localize';\n\nimport { FileStorageClient } from '../file-storage-client.js';\nimport { fileStorageClientContext } from '../context.js';\nimport { HolochainDropzone } from '../holochain-dropzone.js';\nimport { EntryHash } from '@holochain/client';\n\n/**\n * @fires file-uploaded - Fired after having uploaded the file\n * @csspart dropzone - Style the dropzone itself\n */\n@localized()\n@customElement('upload-files')\nexport class UploadFiles extends DropzoneElement implements FormField {\n  /**\n   * The name of the field if this element is used inside a form\n   * Required only if the element is used inside a form\n   */\n  @property()\n  name!: string;\n\n  /**\n   * Whether this field is required if this element is used inside a form\n   */\n  @property()\n  required = false;\n\n  /**\n   * Whether this field is disabled if this element is used inside a form\n   */\n  @property()\n  disabled = false;\n\n  /**\n   * The default value that this element will take if it is resetted in a form\n   */\n  @property()\n  defaultValue!: EntryHash | Array<EntryHash>;\n\n  /** Public attributes */\n\n  /**\n   * Whether this element should allow only file to be uploaded\n   */\n  @property({ type: Boolean, attribute: 'one-file' }) oneFile = false;\n\n  /**\n   * The type of files accepted by this element\n   * Learn how to use this here: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\n   */\n  @property({ type: String, attribute: 'accepted-files' }) acceptedFiles:\n    | string\n    | undefined = undefined;\n\n  /**\n   * @internal\n   */\n  @consume({ context: fileStorageClientContext })\n  _client!: FileStorageClient;\n\n  /**\n   * @internal\n   */\n  _controller = new FormFieldController(this);\n\n  async firstUpdated() {\n    super.firstUpdated();\n    if (this.defaultValue !== undefined) {\n      if (Array.isArray(this.defaultValue)) {\n        for (const fileHash of this.defaultValue) {\n          const image = await this._client.downloadFile(fileHash);\n          this.dropzone.addFile(image as any);\n        }\n      } else {\n        const image = await this._client.downloadFile(this.defaultValue);\n        this.dropzone.addFile(image as any);\n      }\n    }\n  }\n\n  reset() {\n    this.clear();\n  }\n\n  /**\n   * @internal\n   */\n  get value() {\n    if (this.oneFile)\n      return this.dropzone.files[0]\n        ? (this.dropzone.files[0] as any).hash\n        : undefined;\n    return this.dropzone.files.map(file => (file as any).hash);\n  }\n\n  /**\n   * @internal\n   */\n  @query('#hidden-input')\n  private _input!: HTMLInputElement;\n\n  reportValidity() {\n    const invalid = this.required !== false && this.value === undefined;\n    if (invalid) {\n      this._input.setCustomValidity(`Uploading a file is required`);\n      this._input.reportValidity();\n    }\n\n    return !invalid;\n  }\n\n  buildDropzone(dropzoneElement: HTMLElement, options: DropzoneOptions) {\n    return new HolochainDropzone(\n      dropzoneElement,\n      this._client,\n      options\n    ) as any as Dropzone;\n  }\n\n  render() {\n    return html`\n      <div style=\"position: relative; flex: 1\">\n        <input\n          id=\"hidden-input\"\n          style=\"width:0; height: 0; position: absolute; z-index: -1; left: 50%; top: 20%\"\n        />\n        ${super.render()}\n      </div>\n    `;\n  }\n}\n","import { html } from \"lit-html\";\nimport \"@holochain-open-dev/file-storage/dist/elements/upload-files.js\";\nimport \"@holochain-open-dev/file-storage/dist/elements/file-storage-context.js\";\nimport { FileStorageZomeMock } from \"@holochain-open-dev/file-storage/dist/mocks.js\";\nimport { FileStorageClient } from \"@holochain-open-dev/file-storage\";\nconst mock = new FileStorageZomeMock();\n\n// More on how to set up stories at: https://storybook.js.org/docs/7.0/web-components/writing-stories/introduction\nexport default {\n  title: \"Frontend/Elements/upload-files\",\n  tags: [\"autodocs\"],\n  component: \"upload-files\",\n  render: args => html`<file-storage-context .client=${new FileStorageClient(mock)}>\n      <upload-files></upload-files>\n    </file-storage-context>`\n};\n\n// More on writing stories with args: https://storybook.js.org/docs/7.0/web-components/writing-stories/args\nexport const Demo = {};\nDemo.parameters = {\n  ...Demo.parameters,\n  docs: {\n    ...Demo.parameters?.docs,\n    source: {\n      originalSource: \"{}\",\n      ...Demo.parameters?.docs?.source\n    }\n  }\n};","import { css, html, LitElement } from \"lit\";\nimport { provide } from \"@lit-labs/context\";\nimport { property, customElement } from \"lit/decorators.js\";\n\nimport { fileStorageClientContext } from \"../context.js\";\nimport { FileStorageClient } from \"../file-storage-client.js\";\n\n@customElement(\"file-storage-context\")\nexport class FileStorageContext extends LitElement {\n  @provide({ context: fileStorageClientContext })\n  @property({ type: Object })\n  client!: FileStorageClient;\n\n  render() {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: contents;\n    }\n  `;\n}\n"],"names":[],"sourceRoot":""}