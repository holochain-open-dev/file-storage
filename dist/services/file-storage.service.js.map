{"version":3,"file":"file-storage.service.js","sourceRoot":"","sources":["../../src/services/file-storage.service.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { FileMetadata } from '../types';\n\nexport class FileStorageService {\n  /**\n   * @param appWebsocket connection to the holochain backend\n   * @param cellId the cell to which to upload the file\n   * @param zomeName the zome name of the file_storage zome in the given cell\n   */\n  constructor(\n    protected appWebsocket: AppWebsocket,\n    protected cellId: CellId,\n    protected zomeName: string = 'file_storage'\n  ) {}\n\n  /**\n   * Upload a file to the file_storage zome, splitting it into chunks\n   *\n   * @param file file to split and upload\n   * @param chunkSize chunk size to split the file, default 256 KB\n   */\n  async uploadFile(\n    file: File,\n    onProgress:\n      | undefined\n      | ((percentatgeProgress: number, bytesSent: number) => void) = undefined,\n    chunkSize: number = 256 * 1024\n  ): Promise<string> {\n    const blobs = this._splitFile(file, chunkSize);\n    const numberOfChunks = blobs.length;\n    const bytesPerChunk = blobs[0].size;\n\n    const chunksHashes: Array<string> = [];\n    for (let i = 0; i < blobs.length; i++) {\n      const chunkHash = await this._createChunk(blobs[i]);\n      chunksHashes.push(chunkHash);\n      if (onProgress) {\n        onProgress(((i + 1) * 1.0) / numberOfChunks, bytesPerChunk * (i + 1));\n      }\n    }\n\n    const fileToCreate = {\n      name: file.name,\n      size: file.size,\n      fileType: file.type,\n      lastModified: file.lastModified,\n      chunksHashes,\n    };\n    const hash = await this._callZome('create_file_metadata', fileToCreate);\n\n    return hash;\n  }\n\n  /**\n   * Downloads the whole file with the given hash\n   * @param fileHash\n   */\n  async downloadFile(fileHash: string): Promise<File> {\n    const metadata = await this.getFileMetadata(fileHash);\n\n    const fetchChunksPromises = metadata.chunksHashes.map(hash =>\n      this.fetchChunk(hash)\n    );\n\n    const chunks = await Promise.all(fetchChunksPromises);\n\n    const file = new File(chunks, metadata.name, {\n      lastModified: metadata.lastModifed,\n      type: metadata.fileType,\n    });\n\n    return file;\n  }\n\n  /**\n   * Gets only the metadata of the file with the given hash\n   * This is specially useful if you want to fetch the chunks one by one\n   * @param fileHash the hash of the file\n   */\n  async getFileMetadata(fileHash: string): Promise<FileMetadata> {\n    return await this._callZome('get_file_metadata', fileHash);\n  }\n\n  /**\n   * Fetch the chunk identified with the given hash\n   * This is useful if used with the chunk hashes received with `getFileMetadata`\n   * @param fileChunkHash\n   */\n  async fetchChunk(fileChunkHash: string): Promise<Blob> {\n    const bytes = await this._callZome('get_file_chunk', fileChunkHash);\n\n    return new Blob([new Uint8Array(bytes)]);\n  }\n\n  /** Private helpers */\n\n  private _splitFile(file: File, chunkSize: number): Blob[] {\n    let offset = 0;\n    const chunks: Blob[] = [];\n\n    while (file.size > offset) {\n      const chunk = file.slice(offset, offset + chunkSize);\n      offset += chunkSize;\n      chunks.push(chunk);\n    }\n\n    return chunks;\n  }\n\n  private async _createChunk(chunk: Blob): Promise<string> {\n    const bytes = await chunk.arrayBuffer();\n\n    return this._callZome('create_file_chunk', new Uint8Array(bytes));\n  }\n\n  private _callZome(fnName: string, payload: any): Promise<any> {\n    return this.appWebsocket.callZome({\n      cap: null as any,\n      cell_id: this.cellId,\n      zome_name: this.zomeName,\n      fn_name: fnName,\n      payload: payload,\n      provenance: this.cellId[1],\n    });\n  }\n}\n"]}