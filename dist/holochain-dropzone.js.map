{"version":3,"file":"holochain-dropzone.js","sourceRoot":"","sources":["../src/holochain-dropzone.ts"],"names":[],"mappings":"AAAA,OAAO,QAA6B,MAAM,UAAU,CAAC;AAGrD,MAAM,OAAO,iBAAkB,SAAQ,QAAQ;IAE7C,YACE,EAAe,EACf,kBAAsC,EACtC,OAAwB;QAExB,OAAO,CAAC,GAAG,GAAG,wBAAwB,CAAC,CAAC,4BAA4B;QACpE,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QACnB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAED,WAAW,CAAC,KAA8B;QACxC,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,uBAAuB,CAC3B,aAAsC;QAEtC,KAAK,MAAM,IAAI,IAAI,aAAa,EAAE;YAChC,IAAI;gBACF,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;gBACjD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,CACnD,IAAI,EACJ,CAAC,WAAW,EAAE,SAAS,EAAE,EAAE;oBACzB,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,WAAW,GAAG,GAAG,EAAE,SAAS,CAAC,CAAC;gBAClE,CAAC,CACF,CAAC;gBACF,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;gBACtC,aAAa;gBACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aAC7B;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAG,CAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAChD;SACF;IACH,CAAC;CACF","sourcesContent":["import Dropzone, { DropzoneOptions } from 'dropzone';\nimport { FileStorageService } from './services/file-storage.service';\n\nexport class HolochainDropzone extends Dropzone {\n  fileStorageService: FileStorageService;\n  constructor(\n    el: HTMLElement,\n    fileStorageService: FileStorageService,\n    options: DropzoneOptions\n  ) {\n    options.url = 'https://holochain.org/'; // just to bypass the check.\n    super(el, options);\n    this.fileStorageService = fileStorageService;\n  }\n\n  uploadFiles(files: Dropzone.DropzoneFile[]) {\n    this._uploadFilesToHolochain(files);\n  }\n\n  async _uploadFilesToHolochain(\n    dropzoneFiles: Dropzone.DropzoneFile[]\n  ): Promise<void> {\n    for (const file of dropzoneFiles) {\n      try {\n        this.emit('sending', file, undefined, undefined);\n        const hash = await this.fileStorageService.uploadFile(\n          file,\n          (percentatge, bytesSent) => {\n            this.emit('uploadprogress', file, percentatge * 100, bytesSent);\n          }\n        );\n        this.emit('success', file, undefined);\n        // @ts-ignore\n        file.hash = hash;\n        this.emit('complete', file);\n      } catch (e) {\n        console.error(e);\n        this.emit('error', file, (e as any).data.data);\n      }\n    }\n  }\n}\n"]}