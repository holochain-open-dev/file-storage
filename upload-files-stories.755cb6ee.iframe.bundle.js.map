{"version":3,"file":"upload-files-stories.755cb6ee.iframe.bundle.js","mappings":";;AAmBA;;;;ACTA;;;;;ACkEA;;ACnBA;AACA;AACA;;AAIA;;;;AAWA","sources":["webpack://@holochain-open-dev/file-storage-dev/./stories/upload-files.stories.js","webpack://@holochain-open-dev/file-storage-dev/../../src/elements/file-storage-context.ts","webpack://@holochain-open-dev/file-storage-dev/../../src/elements/show-image.ts","webpack://@holochain-open-dev/file-storage-dev/../../src/elements/upload-files.ts"],"sourcesContent":["import { html } from \"lit-html\";\nimport \"@holochain-open-dev/file-storage/upload-files\";\nimport \"@holochain-open-dev/file-storage/file-storage-context\";\nimport { FileStorageZomeMock } from \"@holochain-open-dev/file-storage/mocks\";\nimport { FileStorageClient } from \"@holochain-open-dev/file-storage\";\nconst mock = new FileStorageZomeMock();\nconst client = new FileStorageClient(mock);\n\n// More on how to set up stories at: https://storybook.js.org/docs/7.0/web-components/writing-stories/introduction\nexport default {\n  title: \"Frontend/Elements/upload-files\",\n  tags: [\"autodocs\"],\n  component: \"upload-files\",\n  render: args => html`<file-storage-context .client=${new FileStorageClient(mock)}>\n      <upload-files></upload-files>\n    </file-storage-context>`\n};\n\n// More on writing stories with args: https://storybook.js.org/docs/7.0/web-components/writing-stories/args\nexport const Demo = {};\nDemo.parameters = {\n  ...Demo.parameters,\n  docs: {\n    ...Demo.parameters?.docs,\n    source: {\n      originalSource: \"{}\",\n      ...Demo.parameters?.docs?.source\n    }\n  }\n};","import { css, html, LitElement } from \"lit\";\nimport { provide } from \"@lit-labs/context\";\nimport { property } from \"lit/decorators.js\";\n\nimport { fileStorageClientContext } from \"../context\";\nimport { FileStorageClient } from \"../file-storage-client\";\n\nexport class FileStorageContext extends LitElement {\n  @provide({ context: fileStorageClientContext })\n  @property({ type: Object })\n  client!: FileStorageClient;\n\n  render() {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: contents;\n    }\n  `;\n}\n","import { css, html, LitElement } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport {\n  DisplayError,\n  hashProperty,\n  sharedStyles,\n} from \"@holochain-open-dev/elements\";\nimport { ScopedElementsMixin } from \"@open-wc/scoped-elements\";\nimport { consume } from \"@lit-labs/context\";\n\nimport { EntryHash } from \"@holochain/client\";\nimport { Task } from \"@lit-labs/task\";\nimport { SlSkeleton } from \"@scoped-elements/shoelace\";\nimport { fromUint8Array } from \"js-base64\";\n\nimport { FileStorageClient } from \"../file-storage-client\";\nimport { fileStorageClientContext } from \"../context\";\n\n/**\n * @fires file-uploaded - Fired after having uploaded the file\n * @csspart dropzone - Style the dropzone itself\n */\nexport class ShowImage extends ScopedElementsMixin(LitElement) {\n  /** Public attributes */\n\n  /**\n   * REQUIRED. The hash of the image to be rendered\n   */\n  @property(hashProperty(\"image-hash\")) imageHash!: EntryHash;\n\n  /**\n   * @internal\n   */\n  @consume({ context: fileStorageClientContext })\n  _client!: FileStorageClient;\n\n  /**\n   * @internal\n   */\n  _renderImage = new Task(\n    this,\n    async ([fileHash]) => {\n      const file = await this._client.downloadFile(fileHash);\n      const data = await file.arrayBuffer();\n\n      return [file, new Uint8Array(data)] as [File, Uint8Array];\n    },\n    () => [this.imageHash]\n  );\n\n  renderImage(file: File, data: Uint8Array) {\n    return html`<img src=\"data:${file.type};base64,${fromUint8Array(\n      data\n    )}\" style=\"flex: 1\"></img>`;\n  }\n\n  render() {\n    return this._renderImage.render({\n      complete: ([f, d]) => this.renderImage(f, d),\n      pending: () =>\n        html`<sl-skeleton effect=\"pulse\" style=\"flex: 1\"></sl-skeleton>`,\n      error: (e: any) =>\n        html`<display-error .error=${e.data.data}></display-error>`,\n    });\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: flex;\n          flex: 1;\n        }\n      `,\n    ];\n  }\n\n  /**\n   * @internal\n   */\n  static get scopedElements() {\n    return { \"sl-skeleton\": SlSkeleton, \"display-error\": DisplayError };\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { property } from \"lit/decorators.js\";\n\nimport { ScopedElementsMixin } from \"@open-wc/scoped-elements\";\nimport { DropzoneElement } from \"@scoped-elements/dropzone\";\nimport { consume } from \"@lit-labs/context\";\nimport { DropzoneOptions } from \"dropzone\";\nimport { sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport { FileStorageClient } from \"../file-storage-client\";\nimport { HolochainDropzone } from \"../holochain-dropzone\";\nimport { fileStorageClientContext } from \"../context\";\n\n/**\n * @fires file-uploaded - Fired after having uploaded the file\n * @csspart dropzone - Style the dropzone itself\n */\nexport class UploadFiles extends ScopedElementsMixin(LitElement) {\n  /** Public attributes */\n\n  /**\n   * Whether this element should allow only file to be uploaded\n   */\n  @property({ type: Boolean, attribute: \"one-file\" }) oneFile = false;\n\n  /**\n   * The type of files accepted by this element\n   * Learn how to use this here: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\n   */\n  @property({ type: String, attribute: \"accepted-files\" }) acceptedFiles:\n    | string\n    | undefined = undefined;\n\n  /**\n   * @internal\n   */\n  @consume({ context: fileStorageClientContext })\n  _client!: FileStorageClient;\n\n  /** Private properties */\n\n  firstUpdated() {\n    const client = this._client;\n\n    this.defineScopedElement(\n      \"drop-zone\",\n      class extends DropzoneElement {\n        buildDropzone(dropzoneElement: HTMLElement, options: DropzoneOptions) {\n          return new HolochainDropzone(dropzoneElement, client, options);\n        }\n      }\n    );\n  }\n\n  render() {\n    return html`\n      <drop-zone\n        .oneFile=${this.oneFile}\n        .acceptedFiles=${this.acceptedFiles}\n        @file-uploaded=${(e: CustomEvent) =>\n          (e.detail.hash = e.detail.file.hash)}\n      ></drop-zone>\n    `;\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: contents;\n        }\n      `,\n    ];\n  }\n}\n"],"names":[],"sourceRoot":""}