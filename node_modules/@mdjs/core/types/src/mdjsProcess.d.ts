export type Story = import("./types").Story;
export type ParseResult = import("./types").ParseResult;
export type ProcessResult = import("./types").ProcessResult;
export type MdjsProcessPlugin = import("./types").MdjsProcessPlugin;
/**
 * Processes mdjs to html/js/stories
 *
 * Js code includes the linking between js and stories
 *
 * @param {string} mdjs
 * @param {object} options
 * @param {string} [options.rootNodeQueryCode]
 * @param {function | function[]} [options.setupUnifiedPlugins]
 * @param {MdjsProcessPlugin[]} [options.plugins] @deprecated use setupUnifiedPlugins instead
 */
export function mdjsProcess(mdjs: string, { rootNodeQueryCode, setupUnifiedPlugins, plugins, }?: {
    rootNodeQueryCode: string;
    setupUnifiedPlugins: Function | Function[];
    plugins: MdjsProcessPlugin[];
}): Promise<{
    stories: import("./types").Story[];
    jsCode: string;
    html: string;
}>;
/** @type {MdjsProcessPlugin[]} */
export const mdjsProcessPlugins: MdjsProcessPlugin[];
//# sourceMappingURL=mdjsProcess.d.ts.map