export type MarkdownResult = import("./src/types").MarkdownResult;
export type Story = import("./src/types").Story;
export const mdjsParse: () => (tree: any, file: any) => any;
export const mdjsStoryParse: ({ storyTag, previewStoryTag, }?: {
    storyTag?: (name: string) => string;
    previewStoryTag?: (name: string) => string;
    counter?: number;
}) => (tree: any, file: any) => Promise<any>;
export const mdjsDocPage: (body: string) => Promise<string>;
export const mdjsProcess: (mdjs: string, { rootNodeQueryCode, setupUnifiedPlugins, plugins, }?: {
    rootNodeQueryCode?: string;
    setupUnifiedPlugins?: Function | Function[];
    plugins?: import("./src/types").MdjsProcessPlugin[];
}) => Promise<{
    stories: import("./src/types").Story[];
    jsCode: string;
    html: string;
}>;
export const mdjsProcessPlugins: import("./src/types").MdjsProcessPlugin[];
export const mdjsTransformer: ({ url, body }: {
    url: any;
    body: any;
}) => Promise<{
    body: string;
    contentType: string;
}>;
export const resolveToUnpkg: (code: string, pkgJson?: any) => Promise<string>;
export const isMdjsContent: (text: string) => boolean;
//# sourceMappingURL=index.d.ts.map