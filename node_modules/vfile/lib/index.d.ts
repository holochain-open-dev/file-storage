export class VFile {
  /**
   * Create a new virtual file.
   *
   * If `options` is `string` or `Buffer`, treats it as `{value: options}`.
   * If `options` is a `VFile`, shallow copies its data over to the new file.
   * All other given fields are set on the newly created `VFile`.
   *
   * Path related properties are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * It’s not possible to set either `dirname` or `extname` without setting
   * either `history`, `path`, `basename`, or `stem` as well.
   *
   * @param {VFileCompatible} [value]
   */
  constructor(value?: VFileCompatible)
  /**
   * Place to store custom information.
   * It’s OK to store custom data directly on the file, moving it to `data`
   * gives a little more privacy.
   * @type {Object.<string, unknown>}
   */
  data: {
    [x: string]: unknown
  }
  /**
   * List of messages associated with the file.
   * @type {Array.<VFileMessage>}
   */
  messages: Array<VFileMessage>
  /**
   * List of file paths the file moved between.
   * @type {Array.<string>}
   */
  history: Array<string>
  /**
   * Base of `path`.
   * Defaults to `process.cwd()` (`/` in browsers).
   * @type {string}
   */
  cwd: string
  /**
   * Raw value.
   * @type {VFileValue}
   */
  value: VFileValue
  /**
   * Whether a file was saved to disk.
   * @type {boolean}
   */
  stored: boolean
  /**
   * Set full path (`~/index.min.js`).
   * Cannot be nullified.
   */
  set path(arg: string)
  /**
   * Access full path (`~/index.min.js`).
   */
  get path(): string
  /**
   * Set parent path (`~`).
   * Cannot be set if there's no `path` yet.
   */
  set dirname(arg: string)
  /**
   * Access parent path (`~`).
   */
  get dirname(): string
  /**
   * Set basename (`index.min.js`).
   * Cannot contain path separators.
   * Cannot be nullified either (use `file.path = file.dirname` instead).
   */
  set basename(arg: string)
  /**
   * Access basename (including extname) (`index.min.js`).
   */
  get basename(): string
  /**
   * Set extname (including dot) (`.js`).
   * Cannot be set if there's no `path` yet and cannot contain path separators.
   */
  set extname(arg: string)
  /**
   * Access extname (including dot) (`.js`).
   */
  get extname(): string
  /**
   * Set stem (w/o extname) (`index.min`).
   * Cannot be nullified, and cannot contain path separators.
   */
  set stem(arg: string)
  /**
   * Access stem (w/o extname) (`index.min`).
   */
  get stem(): string
  /**
   * Serialize the file.
   *
   * @param {BufferEncoding} [encoding='utf8'] If `file.value` is a buffer, `encoding` is used to serialize buffers.
   * @returns {string}
   */
  toString(encoding?: BufferEncoding): string
  /**
   * Create a message and associates it w/ the file.
   *
   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
   * @param {string} [origin] Place in code the message originates from (`string`, optional).
   * @returns {VFileMessage}
   */
  message(
    reason: string | Error,
    place?: Node | Position | Point,
    origin?: string
  ): VFileMessage
  /**
   * Info: create a message, associate it with the file, and mark the fatality
   * as `null`.
   * Calls `message()` internally.
   *
   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
   * @param {string} [origin] Place in code the message originates from (`string`, optional).
   * @returns {VFileMessage}
   */
  info(
    reason: string | Error,
    place?: Node | Position | Point,
    origin?: string
  ): VFileMessage
  /**
   * Fail: create a message, associate it with the file, mark the fatality as
   * `true`.
   * Note: fatal errors mean a file is no longer processable.
   * Calls `message()` internally.
   *
   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
   * @param {string} [origin] Place in code the message originates from (`string`, optional).
   * @returns {never}
   */
  fail(
    reason: string | Error,
    place?: Node | Position | Point,
    origin?: string
  ): never
}
export type Node = import('unist').Node
export type Position = import('unist').Position
export type Point = import('unist').Point
/**
 * Encodings supported by the buffer class.
 * This is a copy of the typing from Node, copied to prevent Node globals from
 * being needed.
 * Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a2bc1d8/types/node/globals.d.ts#L174>
 */
export type BufferEncoding =
  | 'ascii'
  | 'utf8'
  | 'utf-8'
  | 'utf16le'
  | 'ucs2'
  | 'ucs-2'
  | 'base64'
  | 'latin1'
  | 'binary'
  | 'hex'
/**
 * Contents of the file.
 * Can either be text, or a Buffer like structure.
 * This does not directly use type `Buffer`, because it can also be used in a
 * browser context.
 * Instead this leverages `Uint8Array` which is the base type for `Buffer`,
 * and a native JavaScript construct.
 */
export type VFileValue = string | Uint8Array
/**
 * Things that can be
 * passed to the constructor.
 */
export type VFileCompatible = VFileValue | VFileOptions | VFile
export type VFileCoreOptions = {
  value?: VFileValue
  cwd?: string
  history?: Array<string>
  path?: string
  basename?: string
  stem?: string
  extname?: string
  dirname?: string
  data?: {
    [x: string]: unknown
  }
}
/**
 * Configuration: a bunch of keys that will be shallow copied over to the new
 * file.
 */
export type VFileOptions = {
  [key: string]: unknown
} & VFileCoreOptions
export type VFileReporterSettings = {
  [x: string]: unknown
}
export type VFileReporter = <
  T = {
    [x: string]: unknown
  }
>(
  files: VFile[],
  options: T
) => string
import {VFileMessage} from 'vfile-message'
