// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../@material/base/component
//   ../../@material/progress-indicator/component
//   ../../@material/base/foundation
//   ../../@material/progress-indicator/foundation

declare module '@material/linear-progress' {
    /**
      * @license
      * Copyright 2019 Google Inc.
      *
      * Permission is hereby granted, free of charge, to any person obtaining a copy
      * of this software and associated documentation files (the "Software"), to deal
      * in the Software without restriction, including without limitation the rights
      * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      * copies of the Software, and to permit persons to whom the Software is
      * furnished to do so, subject to the following conditions:
      *
      * The above copyright notice and this permission notice shall be included in
      * all copies or substantial portions of the Software.
      *
      * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      * THE SOFTWARE.
      */
    export * from '@material/linear-progress/adapter';
    export * from '@material/linear-progress/component';
    export * from '@material/linear-progress/constants';
    export * from '@material/linear-progress/foundation';
}

declare module '@material/linear-progress/adapter' {
    /**
        * Defines the shape of the adapter expected by the foundation.
        * Implement this adapter for your framework of choice to delegate updates to
        * the component in your framework of choice. See architecture documentation
        * for more details.
        * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md
        */
    export interface MDCLinearProgressAdapter {
            addClass(className: string): void;
            /**
                * If available, creates a `ResizeObserver` object, invokes the `#observe`
                * method on the root element. This is used for an optional performance gains
                * for the indeterminate animation on modern browsers.
                *
                * @param callback The callback to apply to the constructor of the
                *    `ResizeObserver`
                * @return Returns a `ResizeObserver` that has had `observe` called on the
                *    root element with the given callback. `null` if `ResizeObserver` is not
                *    implemented or polyfilled.
                */
            attachResizeObserver(callback: ResizeObserverCallback): ResizeObserver | null;
            forceLayout(): void;
            setBufferBarStyle(styleProperty: string, value: string): void;
            setPrimaryBarStyle(styleProperty: string, value: string): void;
            /**
                * Sets the inline style on the root element.
                * @param styleProperty The style property to set.
                * @param value The value the style property should be set to.
                */
            setStyle(styleProperty: string, value: string): void;
            /**
                * @return The width of the root element.
                */
            getWidth(): number;
            hasClass(className: string): boolean;
            removeClass(className: string): void;
            removeAttribute(name: string): void;
            setAttribute(name: string, value: string): void;
    }
}

declare module '@material/linear-progress/component' {
    /**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Permission is hereby granted, free of charge, to any person obtaining a copy
      * of this software and associated documentation files (the "Software"), to deal
      * in the Software without restriction, including without limitation the rights
      * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      * copies of the Software, and to permit persons to whom the Software is
      * furnished to do so, subject to the following conditions:
      *
      * The above copyright notice and this permission notice shall be included in
      * all copies or substantial portions of the Software.
      *
      * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      * THE SOFTWARE.
      */
    import { MDCComponent } from '@material/base/component';
    import { MDCProgressIndicator } from '@material/progress-indicator/component';
    import { MDCLinearProgressFoundation } from '@material/linear-progress/foundation';
    export class MDCLinearProgress extends MDCComponent<MDCLinearProgressFoundation> implements MDCProgressIndicator {
        static attachTo(root: Element): MDCLinearProgress;
        set determinate(value: boolean);
        set progress(value: number);
        set buffer(value: number);
        set reverse(value: boolean);
        open(): void;
        close(): void;
        initialSyncWithDOM(): void;
        getDefaultFoundation(): MDCLinearProgressFoundation;
    }
}

declare module '@material/linear-progress/constants' {
    /**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Permission is hereby granted, free of charge, to any person obtaining a copy
      * of this software and associated documentation files (the "Software"), to deal
      * in the Software without restriction, including without limitation the rights
      * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      * copies of the Software, and to permit persons to whom the Software is
      * furnished to do so, subject to the following conditions:
      *
      * The above copyright notice and this permission notice shall be included in
      * all copies or substantial portions of the Software.
      *
      * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      * THE SOFTWARE.
      */
    export const cssClasses: {
        CLOSED_CLASS: string;
        CLOSED_ANIMATION_OFF_CLASS: string;
        INDETERMINATE_CLASS: string;
        REVERSED_CLASS: string;
        ANIMATION_READY_CLASS: string;
    };
    export const strings: {
        ARIA_VALUENOW: string;
        BUFFER_BAR_SELECTOR: string;
        FLEX_BASIS: string;
        PRIMARY_BAR_SELECTOR: string;
    };
    export const animationDimensionPercentages: {
        PRIMARY_HALF: number;
        PRIMARY_FULL: number;
        SECONDARY_QUARTER: number;
        SECONDARY_HALF: number;
        SECONDARY_FULL: number;
    };
}

declare module '@material/linear-progress/foundation' {
    /**
        * @license
        * Copyright 2017 Google Inc.
        *
        * Permission is hereby granted, free of charge, to any person obtaining a copy
        * of this software and associated documentation files (the "Software"), to deal
        * in the Software without restriction, including without limitation the rights
        * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        * copies of the Software, and to permit persons to whom the Software is
        * furnished to do so, subject to the following conditions:
        *
        * The above copyright notice and this permission notice shall be included in
        * all copies or substantial portions of the Software.
        *
        * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        * THE SOFTWARE.
        */
    import { MDCFoundation } from '@material/base/foundation';
    import { MDCProgressIndicatorFoundation } from '@material/progress-indicator/foundation';
    import { MDCLinearProgressAdapter } from '@material/linear-progress/adapter';
    export class MDCLinearProgressFoundation extends MDCFoundation<MDCLinearProgressAdapter> implements MDCProgressIndicatorFoundation {
            static get cssClasses(): {
                    CLOSED_CLASS: string;
                    CLOSED_ANIMATION_OFF_CLASS: string;
                    INDETERMINATE_CLASS: string;
                    REVERSED_CLASS: string;
                    ANIMATION_READY_CLASS: string;
            };
            static get strings(): {
                    ARIA_VALUENOW: string;
                    BUFFER_BAR_SELECTOR: string;
                    FLEX_BASIS: string;
                    PRIMARY_BAR_SELECTOR: string;
            };
            static get defaultAdapter(): MDCLinearProgressAdapter;
            constructor(adapter?: Partial<MDCLinearProgressAdapter>);
            init(): void;
            setDeterminate(isDeterminate: boolean): void;
            getDeterminate(): boolean;
            setProgress(value: number): void;
            getProgress(): number;
            setBuffer(value: number): void;
            setReverse(isReversed: boolean): void;
            open(): void;
            close(): void;
            /**
                * Handles the transitionend event emitted after `close()` is called and the
                * opacity fades out. This is so that animations are removed only after the
                * progress indicator is completely hidden.
                */
            handleTransitionEnd(): void;
            destroy(): void;
    }
    export default MDCLinearProgressFoundation;
}

