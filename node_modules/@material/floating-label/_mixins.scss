//
// Copyright 2018 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Selector '.mdc-*' should only be used in this project.
// stylelint-disable selector-class-pattern

@use '@material/rtl/mixins' as rtl-mixins;
@use '@material/theme/theme-color';
@use '@material/theme/theme';
@use '@material/feature-targeting/feature-targeting';
@use '@material/animation/variables' as animation-variables;
@use '@material/typography/typography';
@use './variables';

@mixin core-styles($query: feature-targeting.all()) {
  $feat-structure: feature-targeting.create-target($query, structure);
  $feat-animation: feature-targeting.create-target($query, animation);

  // postcss-bem-linter: define floating-label
  .mdc-floating-label {
    @include typography.typography(
      subtitle1,
      $exclude-props: (line-height),
      $query: $query
    );

    @include feature-targeting.targets($feat-structure) {
      position: absolute;
      /* @noflip */
      left: 0;
      /* @noflip */
      transform-origin: left top;
      line-height: 1.15rem;
      text-align: left;
      text-overflow: ellipsis;
      white-space: nowrap;
      cursor: text;
      overflow: hidden;

      /* @alternate */
      // Force the label into its own layer to prevent visible layer promotion adjustments
      // when the ripple is activated behind it.
      will-change: transform;

      @include rtl-mixins.rtl {
        /* @noflip */
        right: 0;
        /* @noflip */
        left: auto;
        /* @noflip */
        transform-origin: right top;
        /* @noflip */
        text-align: right;
      }
    }

    @include feature-targeting.targets($feat-animation) {
      transition: transform variables.$transition-duration
          animation-variables.$standard-curve-timing-function,
        color variables.$transition-duration
          animation-variables.$standard-curve-timing-function;
    }
  }

  .mdc-floating-label--float-above {
    @include feature-targeting.targets($feat-structure) {
      cursor: auto;
    }
  }

  .mdc-floating-label--required {
    &::after {
      @include _required-content($query);
    }

    @include rtl-mixins.rtl {
      &::after {
        @include _required-content-rtl($query);
      }
    }
  }

  @at-root {
    @include float-position(variables.$position-y, $query: $query);
    @include shake-animation(standard, $query: $query);
  }

  @include shake-keyframes(standard, variables.$position-y, $query: $query);
}

@mixin ink-color($color, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  @include feature-targeting.targets($feat-color) {
    @include theme.prop(color, $color);
  }
}

// Used for textarea in case of scrolling
@mixin fill-color($color, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  @include feature-targeting.targets($feat-color) {
    @include theme.prop(background-color, $color);
  }
}

@mixin shake-keyframes(
  $modifier,
  $positionY,
  $positionX: 0%,
  $scale: variables.$float-scale,
  $query: feature-targeting.all()
) {
  $feat-animation: feature-targeting.create-target($query, animation);

  @include feature-targeting.targets($feat-animation) {
    @keyframes mdc-floating-label-shake-float-above-#{$modifier} {
      0% {
        transform: translateX(calc(0 - #{$positionX}))
          translateY(-#{$positionY}) scale(#{$scale});
      }

      33% {
        animation-timing-function: cubic-bezier(0.5, 0, 0.701732, 0.495819);
        transform: translateX(calc(4% - #{$positionX}))
          translateY(-#{$positionY}) scale(#{$scale});
      }

      66% {
        animation-timing-function: cubic-bezier(
          0.302435,
          0.381352,
          0.55,
          0.956352
        );
        transform: translateX(calc(-4% - #{$positionX}))
          translateY(-#{$positionY}) scale(#{$scale});
      }

      100% {
        transform: translateX(calc(0 - #{$positionX}))
          translateY(-#{$positionY}) scale(#{$scale});
      }
    }
  }
}

@mixin float-position(
  $positionY,
  $positionX: 0%,
  $scale: variables.$float-scale,
  $query: feature-targeting.all()
) {
  $feat-structure: feature-targeting.create-target($query, structure);

  .mdc-floating-label--float-above {
    @include feature-targeting.targets($feat-structure) {
      @if $positionX > 0 or $positionX < 0 {
        transform: translateY(-1 * $positionY)
          translateX(-1 * $positionX)
          scale($scale);

        @include rtl-mixins.rtl {
          transform: translateY(-1 * $positionY) translateX($positionX)
            scale($scale);
        }
      } @else {
        transform: translateY(-1 * $positionY) scale($scale);
      }
    }
  }
}

@mixin shake-animation($modifier, $query: feature-targeting.all()) {
  $feat-animation: feature-targeting.create-target($query, animation);

  .mdc-floating-label--shake {
    @include feature-targeting.targets($feat-animation) {
      animation: mdc-floating-label-shake-float-above-#{$modifier} 250ms 1;
    }
  }
}

@mixin max-width($max-width, $query: feature-targeting.all()) {
  $feat-structure: feature-targeting.create-target($query, structure);

  @include feature-targeting.targets($feat-structure) {
    max-width: $max-width;
  }
}

///
/// Sets the CSS transition for the floating animation.
///
/// @param {Number} $duration-ms - Duration (in ms) of the animation.
/// @param {String} $timing-function - Optionally overrides the default animation timing function.
///
@mixin float-transition(
  $duration-ms,
  $timing-function: animation-variables.$standard-curve-timing-function,
  $query: feature-targeting.all()
) {
  $feat-animation: feature-targeting.create-target($query, animation);

  @include feature-targeting.targets($feat-animation) {
    transition: color $duration-ms $timing-function,
      transform $duration-ms $timing-function;
  }
}

@mixin _required-content($query: feature-targeting.all()) {
  $feat-structure: feature-targeting.create-target($query, structure);

  @include feature-targeting.targets($feat-structure) {
    /* @noflip */
    margin-left: 1px;
    /* @noflip */
    margin-right: 0px;
    content: '*';
  }
}

// Need to specify LTR/RTL manually since rtl mixins will add ::after[dir=rtl]
// selector and that breaks some browsers
@mixin _required-content-rtl($query: feature-targeting.all()) {
  $feat-structure: feature-targeting.create-target($query, structure);

  @include feature-targeting.targets($feat-structure) {
    /* @noflip */
    margin-left: 0;
    /* @noflip */
    margin-right: 1px;
  }
}
