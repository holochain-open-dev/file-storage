//
// Copyright 2019 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Selector '.mdc-*' should only be used in this project.
// stylelint-disable selector-class-pattern

@use '@material/feature-targeting/feature-targeting';
@use '@material/rtl/mixins' as rtl-mixins;
@use '@material/theme/theme';
@use '@material/typography/typography';
@use './variables';

@mixin core-styles($query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);
  $feat-structure: feature-targeting.create-target($query, structure);

  .mdc-form-field {
    @include typography.typography(body2, $query);

    @include feature-targeting.targets($feat-color) {
      @include theme.prop(color, text-primary-on-background);
    }

    @include feature-targeting.targets($feat-structure) {
      display: inline-flex;
      align-items: center;
      vertical-align: middle;
    }

    // stylelint-disable-next-line selector-max-type
    > label {
      @include feature-targeting.targets($feat-structure) {
        @include rtl-mixins.reflexive-property(margin, 0, auto);
        @include rtl-mixins.reflexive-property(
          padding,
          variables.$item-spacing,
          0
        );

        order: 0;
      }
    }
  }

  .mdc-form-field--nowrap {
    > label {
      @include feature-targeting.targets($feat-structure) {
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
      }
    }
  }

  .mdc-form-field--align-end {
    // stylelint-disable-next-line selector-max-type
    > label {
      @include feature-targeting.targets($feat-structure) {
        @include rtl-mixins.reflexive-property(margin, auto, 0);
        @include rtl-mixins.reflexive-property(
          padding,
          0,
          variables.$item-spacing
        );

        order: -1;
      }
    }
  }

  .mdc-form-field--space-between {
    @include feature-targeting.targets($feat-structure) {
      justify-content: space-between;
    }

    // stylelint-disable-next-line selector-max-type
    > label {
      @include feature-targeting.targets($feat-structure) {
        margin: 0;

        @include rtl-mixins.rtl {
          // RTL needed for specificity
          margin: 0;
        }
      }
    }
  }
}
