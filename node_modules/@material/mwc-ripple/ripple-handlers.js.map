{"version":3,"file":"ripple-handlers.js","sourceRoot":"","sources":["ripple-handlers.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;AASF;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,OAAO,cAAc;IAQzB;IACI,2CAA2C;IAC3C,QAAuC;QACzC,IAAI,CAAC,UAAU,GAAG,CAAC,EAAU,EAAE,EAAE;YAC/B,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE;YACnB,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,GAAG,EAAE;YACrB,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE;YACnB,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,GAAG,EAAE;YACrB,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE;YACnB,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;CACF","sourcesContent":["/**\n@license\nCopyright 2020 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport {RippleInterface} from '@material/mwc-base/utils';\n\nexport interface RippleAPI extends RippleInterface {\n  startHover: () => void;\n  endHover: () => void;\n}\n\n/**\n * Class that encapsulates the events handlers for `mwc-ripple`\n *\n *\n * Example:\n * ```\n * class XFoo extends LitElement {\n *   async getRipple() {\n *     this.renderRipple = true;\n *     await this.updateComplete;\n *     return this.renderRoot.querySelector('mwc-ripple');\n *   }\n *   rippleHandlers = new RippleHandlers(() => this.getRipple());\n *\n *   render() {\n *     return html`\n *       <div @mousedown=${this.rippleHandlers.startPress}></div>\n *       ${this.renderRipple ? html`<mwc-ripple></mwc-ripple>` : ''}\n *     `;\n *   }\n * }\n * ```\n */\nexport class RippleHandlers implements RippleAPI {\n  startPress: (ev?: Event) => void;\n  endPress: () => void;\n  startFocus: () => void;\n  endFocus: () => void;\n  startHover: () => void;\n  endHover: () => void;\n\n  constructor(\n      /** Function that returns a `mwc-ripple` */\n      rippleFn: () => Promise<RippleAPI|null>) {\n    this.startPress = (ev?: Event) => {\n      rippleFn().then((r) => {\n        r && r.startPress(ev);\n      });\n    };\n    this.endPress = () => {\n      rippleFn().then((r) => {\n        r && r.endPress();\n      });\n    };\n    this.startFocus = () => {\n      rippleFn().then((r) => {\n        r && r.startFocus();\n      });\n    };\n    this.endFocus = () => {\n      rippleFn().then((r) => {\n        r && r.endFocus();\n      });\n    };\n    this.startHover = () => {\n      rippleFn().then((r) => {\n        r && r.startHover();\n      });\n    };\n    this.endHover = () => {\n      rippleFn().then((r) => {\n        r && r.endHover();\n      });\n    };\n  }\n}\n"]}