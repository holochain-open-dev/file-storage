// NOTE: We disable `selector-class-pattern` above to allow using `mdc-` class
// selectors.
// stylelint-disable selector-class-pattern
// Ignore function name case warnings from states module
// stylelint-disable function-name-case

@use 'sass:map';
@use 'sass:selector';
@use 'sass:string';
@use '@material/checkbox/checkbox-custom-properties';
@use '@material/checkbox/checkbox-theme';
@use '@material/checkbox/variables' as checkbox-variables;
@use '@material/ripple/ripple-theme' as mdc-ripple-theme;
@use '@material/theme/color-custom-properties';
@use '@material/theme/css';
@use '@material/theme/shadow-dom';
@use '@material/theme/theme';
@use '@material/theme/theme-color';
@use 'third_party/javascript/material_web_components/ripple/ripple-theme';

$ripple-opacity: (
  hover: map.get(mdc-ripple-theme.$dark-ink-opacities, hover),
  focus: map.get(mdc-ripple-theme.$dark-ink-opacities, focus),
  press: map.get(mdc-ripple-theme.$dark-ink-opacities, press),
);

$light-theme: (
  checkmark-color: checkbox-variables.$mark-color,
  container-checked-color:
    theme-color.prop-value(checkbox-variables.$baseline-theme-color),
  container-checked-hover-color: null,
  container-disabled-color: checkbox-variables.$disabled-color,
  outline-color: checkbox-variables.$border-color,
  outline-hover-color: null,
  ripple-color: theme-color.$on-surface,
  ripple-opacity: $ripple-opacity,
  ripple-checked-color: theme-color.$secondary,
  ripple-checked-opacity: $ripple-opacity,
);

@mixin theme($theme: $light-theme) {
  @include css.declaration(
    checkbox-custom-properties.$ink-color,
    map.get($theme, checkmark-color)
  );
  @include css.declaration(
    checkbox-custom-properties.$checked-color,
    map.get($theme, container-checked-color)
  );
  @include shadow-dom.host-aware(
    selector.append(&, ':hover, :focus, :focus-within, :active')
  ) {
    @include css.declaration(
      checkbox-custom-properties.$checked-color,
      map.get($theme, container-checked-hover-color)
    );
  }
  @include css.declaration(
    checkbox-custom-properties.$unchecked-color,
    map.get($theme, outline-color)
  );
  @include css.declaration(
    checkbox-custom-properties.$disabled-color,
    map.get($theme, container-disabled-color)
  );
  @include shadow-dom.host-aware(
    selector.append(&, ':hover, :focus, :focus-within, :active')
  ) {
    @include css.declaration(
      checkbox-custom-properties.$unchecked-color,
      map.get($theme, outline-hover-color)
    );
  }

  // Ripple styles
  @include ripple-theme.theme(
    (
      state: map.get($theme, ripple-color),
      opacity: map.get($theme, ripple-opacity),
    )
  );

  @include checked-selector() {
    @include ripple-theme.theme(
      (
        state: map.get($theme, ripple-checked-color),
        opacity: map.get($theme, ripple-checked-opacity),
      )
    );
  }

  @if shadow-dom.$css-selector-fallback-declarations {
    .mdc-checkbox {
      @include checkbox-theme.theme($theme);
    }
  }
}

@mixin checked-selector() {
  @include shadow-dom.host-aware(
    selector.append(&, '[checked]'),
    selector.append(&, '[indeterminate]')
  ) {
    @content;
  }
}
