{"version":3,"file":"storybook-prebuilt-1188e5c0.js","sources":["../node_modules/copy-to-clipboard/index.js","../node_modules/toggle-selection/index.js"],"sourcesContent":["\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"âŒ˜\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        e.clipboardData.clearData();\n        e.clipboardData.setData(options.format, text);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n"],"names":["text","options","debug","message","reselectPrevious","range","selection","mark","success","document","getSelection","rangeCount","active","activeElement","ranges","i","push","getRangeAt","tagName","toUpperCase","blur","removeAllRanges","type","forEach","addRange","focus","deselectCurrent","createRange","createElement","textContent","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","format","preventDefault","clipboardData","clearData","setData","body","appendChild","selectNodeContents","execCommand","Error","err","console","error","warn","window","copyKey","test","navigator","userAgent","replace","prompt","removeRange","removeChild"],"mappings":"AA6FA,MAlFA,SAAcA,EAAMC,OACdC,EACFC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAU,EACPP,IACHA,EAAU,IAEZC,EAAQD,EAAQC,QAAS,SAEvBE,ECvBa,eACXE,EAAYG,SAASC,mBACpBJ,EAAUK,kBACN,qBAELC,EAASH,SAASI,cAElBC,EAAS,GACJC,EAAI,EAAGA,EAAIT,EAAUK,WAAYI,IACxCD,EAAOE,KAAKV,EAAUW,WAAWF,WAG3BH,EAAOM,QAAQC,mBAChB,YACA,WACHP,EAAOQ,qBAIPR,EAAS,YAIbN,EAAUe,kBACH,WACc,UAAnBf,EAAUgB,MACVhB,EAAUe,kBAELf,EAAUK,YACbG,EAAOS,SAAQ,SAASlB,GACtBC,EAAUkB,SAASnB,MAIvBO,GACAA,EAAOa,SDZYC,GAEnBrB,EAAQI,SAASkB,cACjBrB,EAAYG,SAASC,gBAErBH,EAAOE,SAASmB,cAAc,SACzBC,YAAc7B,EAEnBO,EAAKuB,MAAMC,IAAM,QAEjBxB,EAAKuB,MAAME,SAAW,QACtBzB,EAAKuB,MAAMG,IAAM,EACjB1B,EAAKuB,MAAMI,KAAO,mBAElB3B,EAAKuB,MAAMK,WAAa,MAExB5B,EAAKuB,MAAMM,iBAAmB,OAC9B7B,EAAKuB,MAAMO,cAAgB,OAC3B9B,EAAKuB,MAAMQ,aAAe,OAC1B/B,EAAKuB,MAAMS,WAAa,OACxBhC,EAAKiC,iBAAiB,QAAQ,SAASC,GACrCA,EAAEC,kBACEzC,EAAQ0C,SACVF,EAAEG,iBACFH,EAAEI,cAAcC,YAChBL,EAAEI,cAAcE,QAAQ9C,EAAQ0C,OAAQ3C,OAI5CS,SAASuC,KAAKC,YAAY1C,GAE1BF,EAAM6C,mBAAmB3C,GACzBD,EAAUkB,SAASnB,IAEFI,SAAS0C,YAAY,cAE9B,IAAIC,MAAM,iCAElB5C,GAAU,EACV,MAAO6C,GACPnD,GAASoD,QAAQC,MAAM,qCAAsCF,GAC7DnD,GAASoD,QAAQE,KAAK,gCAEpBC,OAAOZ,cAAcE,QAAQ9C,EAAQ0C,QAAU,OAAQ3C,GACvDQ,GAAU,EACV,MAAO6C,GACPnD,GAASoD,QAAQC,MAAM,uCAAwCF,GAC/DnD,GAASoD,QAAQC,MAAM,0BACvBpD,EAlEN,SAAgBA,OACVuD,GAAW,YAAYC,KAAKC,UAAUC,WAAa,IAAM,QAAU,YAChE1D,EAAQ2D,QAAQ,gBAAiBJ,GAgE1Bf,CAAO,YAAa1C,EAAUA,EAAQE,QApEjC,oCAqEfsD,OAAOM,OAAO5D,EAASH,YAGrBM,IACkC,mBAAzBA,EAAU0D,YACnB1D,EAAU0D,YAAY3D,GAEtBC,EAAUe,mBAIVd,GACFE,SAASuC,KAAKiB,YAAY1D,GAE5BH,WAGKI"}