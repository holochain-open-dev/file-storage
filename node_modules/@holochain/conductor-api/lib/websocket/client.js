"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WsClient = void 0;
const isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
const msgpack_1 = require("@msgpack/msgpack");
/**
 * A Websocket client which can make requests and receive responses,
 * as well as send and receive signals
 *
 * Uses Holochain's websocket WireMessage for communication.
 */
class WsClient {
    constructor(socket, signalCb) {
        this.socket = socket;
        this.pendingRequests = {};
        this.index = 0;
        // TODO: allow adding signal handlers later
        this.alreadyWarnedNoSignalCb = false;
        socket.onmessage = (encodedMsg) => __awaiter(this, void 0, void 0, function* () {
            let data = encodedMsg.data;
            // If data is not a buffer (nodejs), it will be a blob (browser)
            if (typeof Buffer === "undefined" || !Buffer.isBuffer(data)) {
                data = yield data.arrayBuffer();
            }
            const msg = msgpack_1.decode(data);
            if (msg.type === "Signal") {
                if (signalCb) {
                    const decodedMessage = msgpack_1.decode(msg.data);
                    // Note: holochain currently returns signals as an array of two values: cellId and the serialized signal payload
                    // and this array is nested within the App key within the returned message.
                    const decodedCellId = decodedMessage.App[0];
                    // Note:In order to return readible content to the UI, the signal payload must also be decoded.
                    const decodedPayload = signalTransform(decodedMessage.App[1]);
                    // Return a uniform format to UI (ie: { type, data } - the same format as with callZome and appInfo...)
                    const signal = {
                        type: msg.type,
                        data: { cellId: decodedCellId, payload: decodedPayload },
                    };
                    signalCb(signal);
                }
                else {
                    if (!this.alreadyWarnedNoSignalCb)
                        console.log(`Received signal but no signal callback was set in constructor`);
                    this.alreadyWarnedNoSignalCb = true;
                }
            }
            else if (msg.type === "Response") {
                this.handleResponse(msg);
            }
            else {
                console.error(`Got unrecognized Websocket message type: ${msg.type}`);
            }
        });
    }
    emitSignal(data) {
        const encodedMsg = msgpack_1.encode({
            type: "Signal",
            data: msgpack_1.encode(data),
        });
        this.socket.send(encodedMsg);
    }
    request(data) {
        let id = this.index;
        this.index += 1;
        const encodedMsg = msgpack_1.encode({
            id,
            type: "Request",
            data: msgpack_1.encode(data),
        });
        const promise = new Promise((fulfill, reject) => {
            this.pendingRequests[id] = { fulfill, reject };
        });
        if (this.socket.readyState === this.socket.OPEN) {
            this.socket.send(encodedMsg);
        }
        else {
            return Promise.reject(new Error(`Socket is not open`));
        }
        return promise;
    }
    handleResponse(msg) {
        const id = msg.id;
        if (this.pendingRequests[id]) {
            // resolve response
            if (msg.data === null || msg.data === undefined) {
                this.pendingRequests[id].reject(new Error(`Response canceled by responder`));
            }
            else {
                this.pendingRequests[id].fulfill(msgpack_1.decode(msg.data));
            }
        }
        else {
            console.error(`Got response with no matching request. id=${id}`);
        }
    }
    close() {
        this.socket.close();
        return this.awaitClose();
    }
    awaitClose() {
        return new Promise((resolve) => this.socket.on("close", resolve));
    }
    static connect(url, signalCb) {
        return new Promise((resolve, reject) => {
            const socket = new isomorphic_ws_1.default(url);
            // make sure that there are no uncaught connection
            // errors because that causes nodejs thread to crash
            // with uncaught exception
            socket.onerror = (e) => {
                reject(new Error(`could not connect to holochain conductor, please check that a conductor service is running and available at ${url}`));
            };
            socket.onopen = () => {
                resolve(new WsClient(socket, signalCb));
            };
        });
    }
}
exports.WsClient = WsClient;
const signalTransform = (res) => {
    return msgpack_1.decode(res);
};
//# sourceMappingURL=client.js.map