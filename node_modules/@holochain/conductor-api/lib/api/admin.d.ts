/// <reference types="node" />
import { Requester } from "./common";
import { HoloHash, AgentPubKey, MembraneProof, DnaProperties, InstalledAppId, CellId, CellNick, InstalledAppInfo, SlotId } from "./types";
export declare type ActivateAppRequest = {
    installed_app_id: InstalledAppId;
};
export declare type ActivateAppResponse = null;
export declare type AttachAppInterfaceRequest = {
    port: number;
};
export declare type AttachAppInterfaceResponse = {
    port: number;
};
export declare type DeactivateAppRequest = {
    installed_app_id: InstalledAppId;
};
export declare type DeactivateAppResponse = null;
export declare type DumpStateRequest = {
    cell_id: CellId;
};
export declare type DumpStateResponse = any;
export declare type GenerateAgentPubKeyRequest = void;
export declare type GenerateAgentPubKeyResponse = AgentPubKey;
export declare type RegisterDnaRequest = {
    uid?: string;
    properties?: DnaProperties;
} & DnaSource;
export declare type RegisterDnaResponse = HoloHash;
export declare type InstallAppRequest = {
    installed_app_id: InstalledAppId;
    agent_key: AgentPubKey;
    dnas: Array<InstallAppDnaPayload>;
};
export declare type InstallAppResponse = InstalledAppInfo;
export declare type CreateCloneCellRequest = {
    properties?: DnaProperties;
    dna_hash: HoloHash;
    agent_key: AgentPubKey;
    installed_app_id: InstalledAppId;
    slot_id: SlotId;
    membrane_proof?: MembraneProof;
};
export declare type CreateCloneCellResponse = CellId;
export declare type ResourceBytes = Buffer;
export declare type ResourceMap = {
    [key: string]: ResourceBytes;
};
export declare type CellProvisioning = {
    create: {
        deferred: boolean;
    };
} | {
    create_clone: {
        deferred: boolean;
    };
} | {
    use_existing: {
        deferred: boolean;
    };
} | {
    create_if_no_exists: {
        deferred: boolean;
    };
} | {
    disabled: {};
};
export declare type HoloHashB64 = string;
export declare type DnaVersionSpec = Array<HoloHashB64>;
export declare type DnaVersionFlexible = {
    singleton: HoloHashB64;
} | {
    multiple: DnaVersionSpec;
};
export declare type AppSlotDnaManifest = {
    location?: Location;
    properties?: DnaProperties;
    uid?: string;
    version?: DnaVersionFlexible;
};
export declare type AppSlotManifest = {
    id: SlotId;
    provisioning?: CellProvisioning;
    dna: AppSlotDnaManifest;
};
export declare type AppManifest = {
    manifest_version: string;
    name: string;
    description?: string;
    slots: Array<AppSlotManifest>;
};
export declare type AppBundle = {
    manifest: AppManifest;
    resources: ResourceMap;
};
export declare type AppBundleSource = {
    bundle: AppBundle;
} | {
    path: string;
};
export declare type Uid = string;
export declare type InstallAppBundleRequest = {
    agent_key: AgentPubKey;
    installed_app_id?: InstalledAppId;
    membrane_proofs: {
        [key: string]: MembraneProof;
    };
    uid?: Uid;
} & AppBundleSource;
export declare type InstallAppBundleResponse = InstalledAppInfo;
export declare type ListDnasRequest = void;
export declare type ListDnasResponse = Array<string>;
export declare type ListCellIdsRequest = void;
export declare type ListCellIdsResponse = Array<CellId>;
export declare type ListActiveAppsRequest = void;
export declare type ListActiveAppsResponse = Array<InstalledAppId>;
export declare type ListAppInterfacesRequest = void;
export declare type ListAppInterfacesResponse = Array<number>;
export declare type AgentInfoSigned = any;
export declare type RequestAgentInfoRequest = {
    cell_id: CellId | null;
};
export declare type RequestAgentInfoResponse = Array<AgentInfoSigned>;
export declare type AddAgentInfoRequest = {
    agent_infos: Array<AgentInfoSigned>;
};
export declare type AddAgentInfoResponse = any;
export interface AdminApi {
    activateApp: Requester<ActivateAppRequest, ActivateAppResponse>;
    attachAppInterface: Requester<AttachAppInterfaceRequest, AttachAppInterfaceResponse>;
    deactivateApp: Requester<DeactivateAppRequest, DeactivateAppResponse>;
    dumpState: Requester<DumpStateRequest, DumpStateResponse>;
    generateAgentPubKey: Requester<GenerateAgentPubKeyRequest, GenerateAgentPubKeyResponse>;
    registerDna: Requester<RegisterDnaRequest, RegisterDnaResponse>;
    installApp: Requester<InstallAppRequest, InstallAppResponse>;
    createCloneCell: Requester<CreateCloneCellRequest, CreateCloneCellResponse>;
    installAppBundle: Requester<InstallAppBundleRequest, InstallAppBundleResponse>;
    listDnas: Requester<ListDnasRequest, ListDnasResponse>;
    listCellIds: Requester<ListCellIdsRequest, ListCellIdsResponse>;
    listActiveApps: Requester<ListActiveAppsRequest, ListActiveAppsResponse>;
    listAppInterfaces: Requester<ListAppInterfacesRequest, ListAppInterfacesResponse>;
    requestAgentInfo: Requester<RequestAgentInfoRequest, RequestAgentInfoResponse>;
    addAgentInfo: Requester<AddAgentInfoRequest, AddAgentInfoResponse>;
}
export declare type InstallAppDnaPayload = {
    hash: HoloHash;
    nick: CellNick;
    properties?: DnaProperties;
    membrane_proof?: MembraneProof;
};
export declare type ZomeLocation = {
    bundled: string;
} | {
    path: string;
} | {
    url: string;
};
export declare type ZomeManifest = {
    name: string;
    hash?: string;
} & ZomeLocation;
export declare type DnaManifest = {
    manifest_version: string;
    name: string;
    uid?: string;
    properties?: DnaProperties;
    zomes: Array<ZomeManifest>;
};
export declare type DnaBundle = {
    manifest: DnaManifest;
    resources: ResourceMap;
};
export declare type DnaSource = {
    hash: HoloHash;
} | {
    path: string;
} | {
    bundle: DnaBundle;
};
export interface HoloHashed<T> {
    hash: HoloHash;
    content: T;
}
export declare type Zomes = Array<[string, {
    wasm_hash: Array<HoloHash>;
}]>;
export declare type WasmCode = [HoloHash, {
    code: Array<number>;
}];
