"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.run = void 0;

var _yargs = _interopRequireDefault(require("yargs"));

var _constants = require("./constants");

var _utils = require("./utils");

var _ = _interopRequireDefault(require("./"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const run = () => {
  let argv = _yargs.default.usage(_constants.USAGE).epilog(_constants.EPILOG).demandCommand().commandDir('commands').help().version(_constants.SAUCE_VERSION_NOTE);

  for (const [commandName, options] of _constants.PROTOCOL_MAP) {
    const params = (0, _utils.getParameters)(options.description.parameters);
    const command = `${commandName} ${params.map(p => p.required ? `<${p.name}>` : `[${p.name}]`).join(' ')}`;
    const description = options.description.summary || options.description.description || 'Unknown description';

    _yargs.default.command(command.trim(), description, yargs => {
      for (const param of params) {
        const paramDescription = {
          describe: param.description,
          type: param.type
        };

        if (typeof param.default !== 'undefined') {
          paramDescription.default = param.default;
        }

        yargs.positional(param.name, paramDescription);
      }
    }, async argv => {
      const {
        user,
        key,
        headless,
        region,
        proxy,
        tld
      } = Object.assign({}, _constants.DEFAULT_OPTIONS, argv);
      const api = new _.default({
        user,
        key,
        headless,
        region,
        proxy,
        tld
      });
      const requiredParams = params.filter(p => p.required).map(p => argv[p.name]);

      try {
        const result = await api[commandName](...requiredParams, argv);

        if (typeof result === 'object') {
          // eslint-disable-next-line no-console
          return console.log(JSON.stringify(result, null, 4));
        } // eslint-disable-next-line no-console


        console.log(result);
      } catch (error) {
        // eslint-disable-next-line no-console
        console.error(error);
        return process.exit(1);
      }
      /**
       * only return for testing purposes
       */


      if (process.env.JEST_WORKER_ID) {
        return api;
      }
    });
  }
  /**
   * populate cli arguments
   */


  for (const param of _constants.CLI_PARAMS) {
    argv = argv.option(param.name, param);
  }

  return argv.argv;
};

exports.run = run;