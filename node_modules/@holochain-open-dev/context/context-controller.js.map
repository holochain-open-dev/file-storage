{"version":3,"file":"context-controller.js","sourceRoot":"","sources":["../src/context-controller.ts"],"names":[],"mappings":"AAAA;;;;;;;;;EASE;AAGF,OAAO,EAAE,YAAY,EAAkB,MAAM,iBAAiB,CAAC;AAE/D;;;;;;;GAOG;AACH,MAAM,OAAO,iBAAiB;IAI5B,YACY,IAAiB,EACnB,QAAkE,EAClE,IAAO;QAFL,SAAI,GAAJ,IAAI,CAAa;QACnB,aAAQ,GAAR,QAAQ,CAA0D;QAClE,SAAI,GAAJ,IAAI,CAAG;QAEf,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAID,aAAa;QACT,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACnB,IAAI,CAAC,IAAI,CAAC,aAAa,CACrB,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YAC7C,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,EAAE;gBAC5C,mEAAmE;gBACnE,IAAI,CAAC,OAAO,EAAE,CAAC;aAChB;YACD,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAC9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,gBAAgB;QACd,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;SAC1B;IACH,CAAC;CACF","sourcesContent":["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { ReactiveController, ReactiveElement } from 'lit';\nimport { ContextEvent, ContextTypeMap } from './context-event';\n\n/**\n * ContextController is a ReactiveController which binds a custom-element's\n * lifecycle to the Context API. When an element is connected to the DOM it\n * will emit the context-request event, invoking the callback set on the\n * controller when the context request is satisfied. It will also call\n * the dispose method provided by the Context API when the element is\n * disconnected.\n */\nexport class ContextController<\n  T extends keyof ContextTypeMap,\n  HostElement extends ReactiveElement\n> implements ReactiveController {\n  constructor(\n    protected host: HostElement,\n    private callback: (value: ContextTypeMap[T], dispose?: () => void) => void,\n    private name: T\n  ) {\n    host.addController(this);\n  }\n\n  private dispose?: () => void;\n\n  hostConnected(): void {\n      console.log('hi')\n    this.host.dispatchEvent(\n      new ContextEvent(this.name, (value, dispose) => {\n        if (this.dispose && this.dispose !== dispose) {\n          // we already have a value, lets cleanup before we take the new one\n          this.dispose();\n        }\n        this.callback(value, dispose);\n        this.dispose = dispose;\n      })\n    ); \n  }\n\n  hostDisconnected(): void {\n    if (this.dispose) {\n      this.dispose();\n      this.dispose = undefined;\n    }\n  }\n}\n"]}