{"version":3,"file":"context-event.js","sourceRoot":"","sources":["../src/context-event.ts"],"names":[],"mappings":"AAoBA;;;;;;;;;;;;;GAaG;AACH,MAAM,OAAO,YAEX,SAAQ,WAAc;IAKtB,YACE,IAAO,EACP,QAA4C,EAC5C,IAAI,GAAG,KAAK;QAEZ,KAAK,CAAC,iBAAiB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;CACF","sourcesContent":["export interface ContextTypeMap {}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    /**\n     * A 'context-request' event can be emitted by any element which desires\n     * a context value to be injected by an external provider.\n     */\n    'context-request': ContextEvent<keyof ContextTypeMap>;\n  }\n}\n\n/**\n * A callback which is provided by a context requester and is called with the value satisfying the request.\n * This callback can be called multiple times by context providers as the requested value is changed.\n */\nexport type ContextCallback<\n  ValueType extends ContextTypeMap[keyof ContextTypeMap]\n> = (value: ValueType, dispose?: () => void) => void;\n\n/**\n * An event fired by a context requester to signal it desires a named context.\n *\n * A provider should inspect the `name` property of the event to determine if it has a value that can\n * satisfy the request, calling the `callback` with the requested value if so.\n *\n * A provider can call the callback multiple times if the value is changed, if this is the case the\n * provider should pass a `dispose` method to the callback which requesters can invoke to indicate they\n * no longer wish to receive these updates.\n *\n * If a requester only wishes to ever receive the context once, then they can optionally set the\n * `once` property on the event, providers should respect this property and only execute the\n * callback once.\n */\nexport class ContextEvent<\n  T extends keyof ContextTypeMap\n> extends CustomEvent<T> {\n  public readonly name: T;\n  public readonly once: boolean;\n  public readonly callback: ContextCallback<ContextTypeMap[T]>;\n\n  public constructor(\n    name: T,\n    callback: ContextCallback<ContextTypeMap[T]>,\n    once = false\n  ) {\n    super('context-request', { bubbles: true, composed: true });\n    this.name = name;\n    this.callback = callback;\n    this.once = once;\n  }\n}\n"]}