{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../src/metadata.ts"],"names":[],"mappings":"AAuCA,MAAM,UAAU,uBAAuB,CACrC,YAAwB;IAExB,IAAK,YAA4C,CAAC,QAAQ;QACxD,OAAQ,YAA4C,CAAC,QAAQ,CAAC;IAChE,IAAK,YAA0C,CAAC,MAAM;QACpD,OAAQ,YAA0C,CAAC,MAAM,CAAC;IAC5D,IAAK,YAA0C,CAAC,MAAM;QACpD,OAAQ,YAA0C,CAAC,MAAM,CAAC;IAC5D,IAAK,YAA4C,CAAC,QAAQ;QACxD,OAAQ,YAA4C,CAAC,QAAQ,CAAC;IAChE,OAAO,SAAS,CAAC;AACnB,CAAC;AA0BD,MAAM,CAAN,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,+CAAK,CAAA;IACL,+CAAK,CAAA;IACL,iDAAM,CAAA;IACN,mDAAO,CAAA;AACT,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB;AAOD,MAAM,CAAN,IAAY,cAgBX;AAhBD,WAAY,cAAc;IACxB,mDAAI,CAAA;IACJ,0DAA0D;IAC1D,mDAAI,CAAA;IACJ,uCAAuC;IACvC,yDAAO,CAAA;IACP,wEAAwE;IACxE,2DAAQ,CAAA;IACR,mFAAmF;IACnF,6DAAS,CAAA;IACT,8EAA8E;IAC9E,2DAAQ,CAAA;IACR,mFAAmF;IACnF,6DAAS,CAAA;IACT,kHAAkH;IAClH,uDAAM,CAAA;AACR,CAAC,EAhBW,cAAc,KAAd,cAAc,QAgBzB","sourcesContent":["import {\n  AgentPubKeyB64,\n  Dictionary,\n  EntryHashB64,\n  HeaderHashB64,\n  HoloHashB64,\n} from './common';\nimport { NewEntryHeader } from './header';\nimport { Timestamp } from './timestamp';\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/state/metadata.rs\n\nexport interface Metadata {\n  // Stores an array of headers indexed by entry hash\n  system_meta: Dictionary<SysMetaVal[]>;\n  link_meta: Array<{ key: LinkMetaKey; value: LinkMetaVal }>;\n  misc_meta: Dictionary<MiscMetaVal>;\n}\n\nexport type SysMetaVal =\n  | {\n      NewEntry: HeaderHashB64;\n    }\n  | {\n      Update: HeaderHashB64;\n    }\n  | {\n      Delete: HeaderHashB64;\n    }\n  | {\n      Activity: HeaderHashB64;\n    }\n  | {\n      DeleteLink: HeaderHashB64;\n    }\n  | {\n      CustomPackage: HeaderHashB64;\n    };\n\nexport function getSysMetaValHeaderHash(\n  sys_meta_val: SysMetaVal\n): HeaderHashB64 | undefined {\n  if ((sys_meta_val as { NewEntry: HeaderHashB64 }).NewEntry)\n    return (sys_meta_val as { NewEntry: HeaderHashB64 }).NewEntry;\n  if ((sys_meta_val as { Update: HeaderHashB64 }).Update)\n    return (sys_meta_val as { Update: HeaderHashB64 }).Update;\n  if ((sys_meta_val as { Delete: HeaderHashB64 }).Delete)\n    return (sys_meta_val as { Delete: HeaderHashB64 }).Delete;\n  if ((sys_meta_val as { Activity: HeaderHashB64 }).Activity)\n    return (sys_meta_val as { Activity: HeaderHashB64 }).Activity;\n  return undefined;\n}\n\nexport interface LinkMetaKey {\n  base: EntryHashB64;\n  zome_id: number;\n  tag: any;\n  header_hash: HeaderHashB64;\n}\n\nexport interface LinkMetaVal {\n  link_add_hash: HeaderHashB64;\n  target: EntryHashB64;\n  timestamp: Timestamp;\n  zome_id: number;\n  tag: any;\n}\n\nexport type MiscMetaVal =\n  | {\n      EntryStatus: EntryDhtStatus;\n    }\n  | 'StoreElement'\n  | { ChainItem: Timestamp }\n  | { ChainObserved: HighestObserved }\n  | { ChainStatus: ChainStatus };\n\nexport enum ChainStatus {\n  Empty,\n  Valid,\n  Forked,\n  Invalid,\n}\n\nexport interface HighestObserved {\n  header_seq: number;\n  hash: HeaderHashB64[];\n}\n\nexport enum EntryDhtStatus {\n  Live,\n  /// This [Entry] has no headers that have not been deleted\n  Dead,\n  /// This [Entry] is awaiting validation\n  Pending,\n  /// This [Entry] has failed validation and will not be served by the DHT\n  Rejected,\n  /// This [Entry] has taken too long / too many resources to validate, so we gave up\n  Abandoned,\n  /// **not implemented** There has been a conflict when validating this [Entry]\n  Conflict,\n  /// **not implemented** The author has withdrawn their publication of this element.\n  Withdrawn,\n  /// **not implemented** We have agreed to drop this [Entry] content from the system. Header can stay with no entry\n  Purged,\n}\n\nexport interface CoreEntryDetails {\n  headers: NewEntryHeader[];\n  links: LinkMetaVal[];\n  dhtStatus: EntryDhtStatus;\n}\n"]}