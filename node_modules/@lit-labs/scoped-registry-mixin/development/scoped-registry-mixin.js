/**
 * @license
 * Copyright (c) 2021 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
import { adoptStyles } from '@lit/reactive-element/css-tag.js';
export function ScopedRegistryHost(superclass) {
    return class ScopedRegistryMixin extends superclass {
        createRenderRoot() {
            const constructor = this.constructor;
            const { registry, elementDefinitions, shadowRootOptions } = constructor;
            if (elementDefinitions && !registry) {
                constructor.registry = new CustomElementRegistry();
                Object.entries(elementDefinitions).forEach(([tagName, klass]) => constructor.registry.define(tagName, klass));
            }
            const renderRoot = (this.renderOptions.creationScope = this.attachShadow({
                ...shadowRootOptions,
                customElements: constructor.registry,
            }));
            adoptStyles(renderRoot, this.constructor.elementStyles);
            return renderRoot;
        }
    };
}
//# sourceMappingURL=scoped-registry-mixin.js.map