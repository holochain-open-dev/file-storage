import * as tsModule from "typescript";
import { ComponentFeature } from "./chunk-component-feature-b8a04bb4";
import { VisibilityKind } from "./chunk-visibility-kind-8314091f";
import { TransformerKind } from "./chunk-transformer-kind-d63ed54e";
/**
 * The main function of the cli.
 */
declare function cli(): void;
interface AnalyzerCliConfig {
    glob?: string[];
    dry?: boolean;
    verbose?: boolean;
    silent?: boolean;
    outFile?: string;
    outFiles?: string;
    outDir?: string;
    format?: TransformerKind;
    visibility?: VisibilityKind;
    features?: ComponentFeature[];
    analyzeGlobalFeatures?: boolean;
    analyzeDependencies?: boolean;
    analyzeDefaultLibrary?: boolean;
    discoverNodeModules?: boolean;
    markdown?: {
        headerLevel?: number;
    };
    inlineTypes?: boolean;
    ts?: typeof tsModule;
    cwd?: string;
}
type CliCommand = (config: AnalyzerCliConfig) => Promise<void> | void;
declare const analyzeCliCommand: CliCommand; /**
 * Transforms analyze results based on the wca cli config.
 * @param results
 * @param program
 * @param config
 */
/**
 * Transforms analyze results based on the wca cli config.
 * @param results
 * @param program
 * @param config
 */
/**
 * Transforms analyze results based on the wca cli config.
 * @param results
 * @param program
 * @param config
 */
declare function analyzeAndTransformGlobs(inputGlobs: string | string[], config: AnalyzerCliConfig): Promise<string>; /**
 * Distribute results into files and return a map of "path => results"
 * @param results
 * @param config
 */
/**
 * Distribute results into files and return a map of "path => results"
 * @param results
 * @param config
 */
/**
 * Distribute results into files and return a map of "path => results"
 * @param results
 * @param config
 */
export { cli, AnalyzerCliConfig, analyzeCliCommand, analyzeAndTransformGlobs };
//# sourceMappingURL=cli.d.ts.map