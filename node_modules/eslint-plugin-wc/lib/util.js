"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNativeCustomElement = exports.isCustomElement = exports.isCustomElementDecorator = void 0;
/**
 * Determines if a given decorator is the `@customElement` decorator
 *
 * @param {DecoratorNode} node Decorator to test
 * @return {boolean}
 */
function isCustomElementDecorator(node) {
    return ((node.expression.type === 'CallExpression' &&
        node.expression.callee.type === 'Identifier' &&
        node.expression.callee.name === 'customElement') ||
        (node.expression.type === 'Identifier' &&
            node.expression.name === 'customElement'));
}
exports.isCustomElementDecorator = isCustomElementDecorator;
/**
 * Determines if a node is an element class or not.
 *
 * @param {Rule.RuleContext} context ESLint rule context
 * @param {ESTree.Node} node Node to test
 * @param {AST.Token=} jsdoc JSDoc to parse
 * @return {boolean}
 */
function isCustomElement(context, node, jsdoc) {
    const asDecorated = node;
    const customElementBases = ['HTMLElement'];
    if (context.settings.wc &&
        Array.isArray(context.settings.wc.elementBaseClasses)) {
        customElementBases.push(...context.settings.wc.elementBaseClasses);
    }
    if (node.type === 'ClassExpression' || node.type === 'ClassDeclaration') {
        if (node.superClass &&
            node.superClass.type === 'Identifier' &&
            customElementBases.includes(node.superClass.name)) {
            return true;
        }
        if (jsdoc !== undefined &&
            jsdoc !== null &&
            jsdoc.value.includes('@customElement')) {
            return true;
        }
        if (asDecorated.decorators !== undefined &&
            asDecorated.decorators.some(isCustomElementDecorator)) {
            return true;
        }
    }
    return false;
}
exports.isCustomElement = isCustomElement;
/**
 * Determines if a node is an extension of HTMLElement class or not.
 *
 * @param {ESTree.Node} node Node to test
 * @return {boolean}
 */
function isNativeCustomElement(node) {
    return ((node.type === 'ClassExpression' || node.type === 'ClassDeclaration') &&
        node.superClass !== undefined &&
        node.superClass !== null &&
        node.superClass.type === 'Identifier' &&
        node.superClass.name === 'HTMLElement');
}
exports.isNativeCustomElement = isNativeCustomElement;
