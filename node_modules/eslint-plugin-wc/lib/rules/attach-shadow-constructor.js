"use strict";
/**
 * @fileoverview Disallows attaching a shadow root outside the constructor
 * @author Michael Stramel <https://github.com/stramel>
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const rule = {
    meta: {
        docs: {
            description: 'Disallows attaching a shadow root outside the constructor',
            url: 'https://github.com/43081j/eslint-plugin-wc/blob/master/docs/rules/attach-shadow-constructor.md'
        },
        messages: {
            attachShadowConstructor: 'Attaching a Shadow Root should only occur in the constructor of an element.'
        }
    },
    create(context) {
        // variables should be defined here
        let insideNonConstructor = false;
        let insideElement = false;
        const source = context.getSourceCode();
        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------
        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------
        return {
            'ClassDeclaration,ClassExpression': (node) => {
                if ((node.type === 'ClassExpression' ||
                    node.type === 'ClassDeclaration') &&
                    util_1.isCustomElement(context, node, source.getJSDocComment(node))) {
                    insideElement = true;
                }
            },
            'ClassDeclaration,ClassExpression:exit': () => {
                insideElement = false;
            },
            MethodDefinition: (node) => {
                if (insideElement &&
                    node.type === 'MethodDefinition' &&
                    node.kind !== 'constructor' &&
                    node.key.type === 'Identifier' &&
                    node.key.name !== 'constructor') {
                    insideNonConstructor = true;
                }
            },
            'MethodDefinition:exit': () => {
                insideNonConstructor = false;
            },
            CallExpression: (node) => {
                if (insideNonConstructor &&
                    node.type === 'CallExpression' &&
                    node.callee.type === 'MemberExpression' &&
                    node.callee.object.type === 'ThisExpression' &&
                    node.callee.property.type === 'Identifier' &&
                    node.callee.property.name === 'attachShadow') {
                    context.report({ node, messageId: 'attachShadowConstructor' });
                }
            }
        };
    }
};
exports.default = rule;
