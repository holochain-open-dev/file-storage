"use strict";
/**
 * @fileoverview Disallows class mutations on self
 * @author James Garbutt <https://github.com/43081j>
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const rule = {
    meta: {
        docs: {
            description: 'Disallows class mutations on self',
            url: 'https://github.com/43081j/eslint-plugin-wc/blob/master/docs/rules/no-self-class.md'
        },
        messages: {
            selfClass: 'Classes should be considered owned by the consumer of the element, ' +
                'meaning they should never be mutated on `this`.'
        }
    },
    create(context) {
        // variables should be defined here
        let insideElement = false;
        const bannedClassListMethods = ['add', 'remove', 'toggle', 'replace'];
        const source = context.getSourceCode();
        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------
        /**
         * Determines if a call expression is of a banned type, such as
         * classList additions.
         *
         * @param {ESTree.CallExpression} node Node to test
         * @return {boolean}
         */
        function isBannedCallExpr(node) {
            const firstArg = node.arguments[0];
            return (node.callee.type === 'MemberExpression' &&
                ((node.callee.object.type === 'MemberExpression' &&
                    node.callee.object.object.type === 'ThisExpression' &&
                    node.callee.object.property.type === 'Identifier' &&
                    node.callee.object.property.name === 'classList' &&
                    node.callee.property.type === 'Identifier' &&
                    bannedClassListMethods.includes(node.callee.property.name)) ||
                    (node.callee.object.type === 'ThisExpression' &&
                        node.callee.property.type === 'Identifier' &&
                        node.callee.property.name === 'setAttribute' &&
                        firstArg !== undefined &&
                        firstArg.type === 'Literal' &&
                        firstArg.value === 'class')));
        }
        /**
         * Determines if an assignment expression is of a banned type, such
         * as className assignments.
         *
         * @param {ESTree.AssignmentExpression} node Node to test
         * @return {boolean}
         */
        function isBannedAssignmentExpr(node) {
            return (node.left.type === 'MemberExpression' &&
                node.left.object.type === 'ThisExpression' &&
                node.left.property.type === 'Identifier' &&
                node.left.property.name === 'className');
        }
        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------
        return {
            'ClassDeclaration,ClassExpression': (node) => {
                if ((node.type === 'ClassExpression' ||
                    node.type === 'ClassDeclaration') &&
                    util_1.isCustomElement(context, node, source.getJSDocComment(node))) {
                    insideElement = true;
                }
            },
            'ClassDeclaration,ClassExpression:exit': () => {
                insideElement = false;
            },
            AssignmentExpression: (node) => {
                if (insideElement &&
                    node.type === 'AssignmentExpression' &&
                    isBannedAssignmentExpr(node)) {
                    context.report({ node: node, messageId: 'selfClass' });
                }
            },
            CallExpression: (node) => {
                if (insideElement &&
                    node.type === 'CallExpression' &&
                    isBannedCallExpr(node)) {
                    context.report({ node: node, messageId: 'selfClass' });
                }
            }
        };
    }
};
exports.default = rule;
