"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfig = exports.validateCoreConfig = void 0;
const portfinder_1 = require("portfinder");
const config_loader_1 = require("@web/config-loader");
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const defaultBaseConfig = {
    rootDir: process.cwd(),
    hostname: 'localhost',
    middleware: [],
    plugins: [],
};
function validateCoreConfig(config) {
    if (typeof config.hostname !== 'string') {
        throw new Error('No hostname specified.');
    }
    if (typeof config.port !== 'number') {
        throw new Error('No port specified.');
    }
    if (typeof config.rootDir !== 'string') {
        throw new Error('No rootDir specified.');
    }
    if (config.open != null &&
        !(typeof config.open === 'string' || typeof config.open === 'boolean')) {
        throw new Error('The open option should be a boolean or string.');
    }
    return config;
}
exports.validateCoreConfig = validateCoreConfig;
async function readConfig(cliArgsConfig = {}) {
    try {
        const fileConfig = await config_loader_1.readConfig('web-dev-server.config', typeof cliArgsConfig.config === 'string' ? cliArgsConfig.config : undefined);
        const config = Object.assign(Object.assign(Object.assign({}, defaultBaseConfig), fileConfig), cliArgsConfig);
        if (typeof config.rootDir === 'string') {
            config.rootDir = path_1.default.resolve(config.rootDir);
        }
        if (typeof config.port !== 'number') {
            const port = 9000 + Math.floor(Math.random() * 1000);
            config.port = await portfinder_1.getPortPromise({ port });
        }
        return config;
    }
    catch (error) {
        if (error instanceof config_loader_1.ConfigLoaderError) {
            console.error(chalk_1.default.red(`\n${error.message}\n`));
            process.exit(1);
        }
        throw error;
    }
}
exports.readConfig = readConfig;
//# sourceMappingURL=readConfig.js.map