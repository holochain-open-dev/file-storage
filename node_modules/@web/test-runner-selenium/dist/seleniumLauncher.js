"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.seleniumLauncher = exports.SeleniumLauncher = void 0;
const selenium_webdriver_1 = require("selenium-webdriver");
const utils_1 = require("./utils");
const IFrameManager_1 = require("./IFrameManager");
class SeleniumLauncher {
    constructor(driverBuilder) {
        this.driverBuilder = driverBuilder;
        this.name = 'Initializing...';
        this.type = 'selenium';
        this.debugDriver = undefined;
        this.isIE = false;
    }
    async initialize(config) {
        this.config = config;
        const cap = this.driverBuilder.getCapabilities();
        this.driverBuilder.withCapabilities(cap);
        this.name = utils_1.getBrowserLabel(cap);
        const browserName = utils_1.getBrowserName(cap).toLowerCase().replace(/_/g, ' ');
        this.isIE =
            (browserName.includes('internet') && browserName.includes('explorer')) ||
                browserName === 'ie' ||
                browserName === 'ie11';
    }
    async stop() {
        var _a, _b;
        try {
            await ((_a = this.driver) === null || _a === void 0 ? void 0 : _a.quit());
            await ((_b = this.debugDriver) === null || _b === void 0 ? void 0 : _b.quit());
            this.driver = undefined;
            this.debugDriver = undefined;
            this.iframeManager = undefined;
        }
        catch (_c) {
            //
        }
    }
    async startSession(id, url) {
        await this.ensureIframeManagerInitialized();
        return this.iframeManager.queueStartSession(id, url);
    }
    isActive(id) {
        var _a;
        return !!((_a = this.iframeManager) === null || _a === void 0 ? void 0 : _a.isActive(id));
    }
    async stopSession(id) {
        return this.iframeManager.queueStopSession(id);
    }
    async startDebugSession(_, url) {
        if (this.debugDriver) {
            await this.debugDriver.quit();
        }
        this.debugDriver = await this.driverBuilder.build();
        await this.debugDriver.navigate().to(url);
    }
    async ensureIframeManagerInitialized() {
        if (this.iframeManager) {
            return;
        }
        if (this.__iframeManagerPromise) {
            await this.__iframeManagerPromise;
            return;
        }
        this.__iframeManagerPromise = this.createiframeManager();
        await this.__iframeManagerPromise;
        this.__iframeManagerPromise = undefined;
    }
    async createiframeManager() {
        if (!this.config)
            throw new Error('Not initialized');
        this.driver = await this.driverBuilder.build();
        this.iframeManager = new IFrameManager_1.IFrameManager(this.config, this.driver, this.isIE);
        return this.iframeManager;
    }
}
exports.SeleniumLauncher = SeleniumLauncher;
function seleniumLauncher(args) {
    if (!(args === null || args === void 0 ? void 0 : args.driverBuilder)) {
        throw new Error(`Selenium launcher requires a driverBuilder property.`);
    }
    if (!((args === null || args === void 0 ? void 0 : args.driverBuilder) instanceof selenium_webdriver_1.Builder)) {
        throw new Error(`driverBuild must be a Builder`);
    }
    return new SeleniumLauncher(args.driverBuilder);
}
exports.seleniumLauncher = seleniumLauncher;
//# sourceMappingURL=seleniumLauncher.js.map