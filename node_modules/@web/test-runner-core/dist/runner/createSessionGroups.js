"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestSessions = void 0;
const uuid_1 = require("uuid");
const path_1 = __importDefault(require("path"));
const TestSessionStatus_1 = require("../test-session/TestSessionStatus");
const collectTestFiles_1 = require("./collectTestFiles");
function createTestSessions(config, groupConfigs) {
    const groups = [];
    if (config.files) {
        groups.push({
            name: 'default',
            files: config.files,
            browsers: config.browsers,
        });
    }
    for (const groupConfig of groupConfigs) {
        // merge group with config defaults
        const mergedGroupConfig = {
            name: groupConfig.name,
            configFilePath: groupConfig.configFilePath,
            browsers: config.browsers,
            files: config.files,
        };
        if (typeof mergedGroupConfig.name !== 'string') {
            throw new Error('Group in config is missing a name.');
        }
        if (groupConfig.browsers != null) {
            mergedGroupConfig.browsers = groupConfig.browsers;
        }
        if (groupConfig.files != null) {
            mergedGroupConfig.files = groupConfig.files;
        }
        groups.push(mergedGroupConfig);
    }
    const sessionGroups = [];
    const testSessions = [];
    const testFiles = new Set();
    const browsers = [];
    for (const group of groups) {
        const baseDir = group.configFilePath ? path_1.default.dirname(group.configFilePath) : process.cwd();
        const testFilesForGroup = collectTestFiles_1.collectTestFiles(group.files, baseDir);
        if (testFilesForGroup.length === 0) {
            throw new Error(`Could not find any test files with pattern(s): ${group.files}`);
        }
        for (const file of testFilesForGroup) {
            testFiles.add(file);
        }
        const sessionGroup = {
            name: group.name,
            browsers: group.browsers,
            testFiles: testFilesForGroup,
            sessionIds: [],
        };
        browsers.push(...group.browsers);
        for (const testFile of testFilesForGroup) {
            for (const browser of group.browsers) {
                const session = {
                    id: uuid_1.v4(),
                    group: sessionGroup,
                    debug: false,
                    testRun: -1,
                    browser,
                    status: TestSessionStatus_1.SESSION_STATUS.SCHEDULED,
                    testFile,
                    errors: [],
                    logs: [],
                    request404s: [],
                };
                testSessions.push(session);
                sessionGroup.sessionIds.push(session.id);
            }
        }
    }
    return { sessionGroups, testSessions, testFiles: Array.from(testFiles), browsers };
}
exports.createTestSessions = createTestSessions;
//# sourceMappingURL=createSessionGroups.js.map