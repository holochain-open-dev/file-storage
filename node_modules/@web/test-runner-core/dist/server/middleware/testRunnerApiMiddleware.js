"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testRunnerApiMiddleware = void 0;
const browser_logs_1 = require("@web/browser-logs");
const co_body_1 = __importDefault(require("co-body"));
const TestSessionStatus_1 = require("../../test-session/TestSessionStatus");
const utils_1 = require("../utils");
function testRunnerApiMiddleware(sessions, rootDir, config, plugins) {
    return async (ctx, next) => {
        var _a, _b, _c;
        if (ctx.path.startsWith('/wtr/')) {
            // config for testing by test file
            if (ctx.path === '/wtr/test-config') {
                ctx.status = 200;
                ctx.body = JSON.stringify({
                    watch: !!config.watch,
                    debug: true,
                    testFrameworkConfig: (_a = config.testFramework) === null || _a === void 0 ? void 0 : _a.config,
                });
                return;
            }
            const [, , sessionId, endpoint, ...restParameters] = ctx.path.split('/');
            if (!sessionId)
                return next();
            if (!endpoint)
                return next();
            const session = sessions.get(sessionId) || sessions.getDebug(sessionId);
            if (!session) {
                ctx.status = 400;
                ctx.body = `Session id ${sessionId} not found`;
                console.error(ctx.body);
                return;
            }
            // config for test session
            if (endpoint === 'config') {
                const testFile = await utils_1.createTestFileImportPath(config, ctx, session.testFile, sessionId);
                ctx.body = JSON.stringify({
                    testFile,
                    watch: !!config.watch,
                    debug: session.debug,
                    testFrameworkConfig: (_b = config.testFramework) === null || _b === void 0 ? void 0 : _b.config,
                });
                return;
            }
            if (endpoint === 'session-started') {
                ctx.status = 200;
                if (session.debug)
                    return;
                sessions.updateStatus(Object.assign(Object.assign({}, session), { userAgent: ctx.headers['user-agent'] }), TestSessionStatus_1.SESSION_STATUS.TEST_STARTED);
                return;
            }
            if (endpoint === 'session-finished') {
                ctx.status = 200;
                if (session.debug)
                    return;
                const result = (await co_body_1.default.json(ctx));
                if (result.logs) {
                    result.logs = result.logs
                        .map((log) => ({ type: log.type, args: log.args.map((a) => browser_logs_1.deserialize(a)) }))
                        .filter((log) => (config.filterBrowserLogs ? config.filterBrowserLogs(log) : true))
                        .map((log) => log.args);
                }
                sessions.updateStatus(Object.assign(Object.assign({}, session), result), TestSessionStatus_1.SESSION_STATUS.TEST_FINISHED);
                return;
            }
            if (endpoint === 'command') {
                if (restParameters.length === 0) {
                    throw new Error('A command name must be provided.');
                }
                if (restParameters.length === 1) {
                    const [command] = restParameters;
                    const { payload } = (await co_body_1.default.json(ctx));
                    for (const plugin of plugins) {
                        try {
                            const result = await ((_c = plugin.executeCommand) === null || _c === void 0 ? void 0 : _c.call(plugin, { command, payload, session }));
                            if (result != null) {
                                ctx.status = 200;
                                ctx.body = JSON.stringify(result);
                                return;
                            }
                        }
                        catch (error) {
                            config.logger.error(error);
                            ctx.status = 500;
                            return;
                        }
                    }
                }
            }
        }
        return next();
    };
}
exports.testRunnerApiMiddleware = testRunnerApiMiddleware;
//# sourceMappingURL=testRunnerApiMiddleware.js.map