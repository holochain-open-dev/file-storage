"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serveTestRunnerHtmlPlugin = void 0;
const constants_1 = require("../../utils/constants");
const utils_1 = require("../utils");
const trackBrowserLogs_1 = require("./trackBrowserLogs");
const iframeModePage = `
<!DOCTYPE html>
<html>
  <head>
    <style>
      iframe {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        border: none;
      }
    </style>
  </head>
  <body></body>
</html>
`;
function createTestPage(browserLogs, testFrameworkImport) {
    return `<!DOCTYPE html>
<html>
  <head>${browserLogs ? trackBrowserLogs_1.trackBrowserLogs : ''}</head>
  <body>
    <script type="module">
      import('${testFrameworkImport}').catch((error) => {
        console.error(error);
        console.error('\x1B[31mThe test framework could not be loaded. Are your dependencies installed correctly? Is there a server plugin or middleware that interferes?\x1B[39m');
      });
    </script>
  </body>
</html>`;
}
async function getManualListItem(config, context, testFile) {
    const testImportPath = await utils_1.createTestFileImportPath(config, context, testFile);
    return `<li><a href="/?${constants_1.PARAM_TEST_FILE}=${testImportPath}">${testImportPath}</a></li>`;
}
async function createManualDebugPage(config, context, testFiles) {
    const listItems = (await Promise.all(testFiles.map(file => getManualListItem(config, context, file)))).join('\n');
    return `<!DOCTYPE html>
<html>
  <head>
    <style>
      p {
        max-width: 600px;
      }
    </style>
  </head>

  <body>
    <h1>Web Test Runner</h1>
    <p>Select a file to debug manually in a custom browser not controlled by Web Test Runner.</p>
    
    <p>
      Advanced functionalities such commands for changing viewport and screenshots don't work here. 
      Use the regular debug option to debug in a controlled browser.
    </p>

    <h2>Test files</h2>
    <ul>
      ${listItems}
    </ul>
  </body>
</html>
`;
}
function serveTestRunnerHtmlPlugin(config, testFiles, testFrameworkImport) {
    return {
        name: 'wtr-test-runner-html',
        async serve(context) {
            if (!testFrameworkImport) {
                throw new Error('Cannot test javascript files without a testFramework configured.');
            }
            if (context.path === '/') {
                const { searchParams } = context.URL;
                if (searchParams.has(constants_1.PARAM_SESSION_ID) || searchParams.has(constants_1.PARAM_TEST_FILE)) {
                    return {
                        type: 'html',
                        body: config.testRunnerHtml
                            ? config.testRunnerHtml(testFrameworkImport, config)
                            : createTestPage(!!config.browserLogs, testFrameworkImport),
                    };
                }
                else if (searchParams.get('mode') === 'iframe') {
                    return {
                        type: 'html',
                        body: iframeModePage,
                    };
                }
                else {
                    return {
                        type: 'html',
                        body: await createManualDebugPage(config, context, testFiles),
                    };
                }
            }
        },
    };
}
exports.serveTestRunnerHtmlPlugin = serveTestRunnerHtmlPlugin;
//# sourceMappingURL=serveTestRunnerHtmlPlugin.js.map