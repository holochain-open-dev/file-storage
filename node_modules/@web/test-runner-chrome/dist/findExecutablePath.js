"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findExecutablePath = void 0;
const fs_1 = __importDefault(require("fs"));
const os_1 = require("os");
const chrome_launcher_1 = require("chrome-launcher");
const macOSinstallations = [
    `${os_1.homedir}/Applications/Google Chrome.app/Contents/MacOS/Google Chrome`,
    `/Applications/Google Chrome.app/Contents/MacOS/Google Chrome`,
];
function isValid(file) {
    try {
        fs_1.default.existsSync(file);
        fs_1.default.accessSync(file);
        return true;
    }
    catch (_a) {
        return false;
    }
}
function findExecutablePath() {
    if (os_1.platform() === 'darwin') {
        for (const path of macOSinstallations) {
            if (isValid(path)) {
                return path;
            }
        }
    }
    const start = Date.now();
    const path = chrome_launcher_1.Launcher.getInstallations()[0];
    if (!path) {
        throw new Error('Could not automatically find any installation of Chrome. ' +
            'If it is installed, use the "installationPath" option to set it manually.  ' +
            'Use @web/test-runner-puppeteer or @web/test-runner-playwright for a bundled browser.');
    }
    if (Date.now() - start > 1500) {
        console.warn('It took a long time to find your local installation of Chrome. ' +
            "It's recommended to pass this executable path manually to prevent the slow lookup: " +
            path);
    }
    return path;
}
exports.findExecutablePath = findExecutablePath;
//# sourceMappingURL=findExecutablePath.js.map