import * as puppeteerCore from 'puppeteer-core';
import { Browser, Page, LaunchOptions } from 'puppeteer-core';
import { BrowserLauncher, TestRunnerCoreConfig } from '@web/test-runner-core';
import { ChromeLauncherPage } from './ChromeLauncherPage';
export declare type CreatePageFunction = (args: {
    config: TestRunnerCoreConfig;
    browser: Browser;
}) => Promise<Page>;
export declare class ChromeLauncher implements BrowserLauncher {
    private launchOptions;
    private customPuppeteer?;
    private createPageFunction?;
    name: string;
    type: string;
    private config?;
    private testFiles?;
    private browser?;
    private debugBrowser?;
    private cachedExecutablePath?;
    private activePages;
    private activeDebugPages;
    private inactivePages;
    private __launchBrowserPromise?;
    constructor(launchOptions: LaunchOptions, customPuppeteer?: typeof puppeteerCore | undefined, createPageFunction?: CreatePageFunction | undefined);
    initialize(config: TestRunnerCoreConfig, testFiles: string[]): Promise<void>;
    launchBrowser(options?: LaunchOptions): Promise<puppeteerCore.Browser>;
    stop(): Promise<void>;
    startSession(sessionId: string, url: string): Promise<void>;
    isActive(sessionId: string): boolean;
    startDebugSession(sessionId: string, url: string): Promise<void>;
    createNewPage(browser: Browser): Promise<ChromeLauncherPage>;
    stopSession(sessionId: string): Promise<import("@web/test-runner-core").SessionResult>;
    private getOrStartBrowser;
    getPage(sessionId: string): puppeteerCore.Page;
}
//# sourceMappingURL=ChromeLauncher.d.ts.map