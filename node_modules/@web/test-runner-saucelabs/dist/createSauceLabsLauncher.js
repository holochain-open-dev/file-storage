"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSauceLabsLauncher = void 0;
const selenium_webdriver_1 = require("selenium-webdriver");
const uuid_1 = require("uuid");
const SauceLabsLauncher_1 = require("./SauceLabsLauncher");
const SauceLabsLauncherManager_1 = require("./SauceLabsLauncherManager");
function createSauceLabsLauncher(saucelabsOptions, sauceConnectOptions) {
    if (saucelabsOptions == null) {
        throw new Error('Options are required to set user and key.');
    }
    if (typeof saucelabsOptions.user !== 'string') {
        throw new Error('Missing user in options');
    }
    if (typeof saucelabsOptions.key !== 'string') {
        throw new Error('Missing key in options');
    }
    const finalSauceLabsOptions = Object.assign({}, saucelabsOptions);
    if (typeof finalSauceLabsOptions.region !== 'string') {
        finalSauceLabsOptions.region = 'us';
    }
    const finalConnectOptions = Object.assign({}, sauceConnectOptions);
    if (typeof finalConnectOptions.tunnelIdentifier !== 'string') {
        finalConnectOptions.tunnelIdentifier = `web-test-runner-${uuid_1.v4()}`;
    }
    const manager = new SauceLabsLauncherManager_1.SauceLabsLauncherManager(finalSauceLabsOptions, finalConnectOptions);
    return function sauceLabsLauncher(capabilities) {
        var _a, _b, _c;
        if (capabilities == null) {
            throw new Error('Capabilities are required.');
        }
        const finalCapabilities = Object.assign({}, capabilities);
        // sync the tunnel identifier, username and access key
        finalCapabilities['sauce:options'] = Object.assign(Object.assign({}, finalCapabilities['sauce:options']), { username: saucelabsOptions.user, accessKey: saucelabsOptions.key, tunnelIdentifier: finalConnectOptions.tunnelIdentifier });
        const browserName = (_c = (_b = (_a = finalCapabilities.browser) !== null && _a !== void 0 ? _a : finalCapabilities.browserName) !== null && _b !== void 0 ? _b : finalCapabilities.device) !== null && _c !== void 0 ? _c : 'unknown';
        const browserVersion = finalCapabilities.browser_version
            ? ` ${finalCapabilities.browser_version}`
            : '';
        const os = ` (${finalCapabilities.os} ${finalCapabilities.os_version})`;
        const browserIdentifier = `${browserName}${browserVersion}${os}`;
        const capabilitiesMap = new Map(Object.entries(finalCapabilities));
        const seleniumCapabilities = new selenium_webdriver_1.Capabilities(capabilitiesMap);
        return new SauceLabsLauncher_1.SauceLabsLauncher(manager, browserIdentifier, manager.webdriverEndpoint, seleniumCapabilities);
    };
}
exports.createSauceLabsLauncher = createSauceLabsLauncher;
//# sourceMappingURL=createSauceLabsLauncher.js.map