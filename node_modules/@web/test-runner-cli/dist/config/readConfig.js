"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfig = exports.validateCoreConfig = void 0;
const portfinder_1 = require("portfinder");
const config_loader_1 = require("@web/config-loader");
const deepmerge_1 = __importDefault(require("deepmerge"));
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const os_1 = require("os");
const TestRunnerLogger_1 = require("../logger/TestRunnerLogger");
const defaultBaseConfig = {
    watch: false,
    rootDir: process.cwd(),
    protocol: 'http:',
    hostname: 'localhost',
    concurrentBrowsers: 2,
    concurrency: os_1.cpus().length / 2,
    browserStartTimeout: 30000,
    testsStartTimeout: 10000,
    testsFinishTimeout: 20000,
    browserLogs: true,
};
const defaultCoverageConfig = {
    exclude: ['**/node_modules/**/*'],
    threshold: { statements: 0, functions: 0, branches: 0, lines: 0 },
    report: true,
    reportDir: 'coverage',
};
function validateCoreConfig(config) {
    if (!(typeof config.files === 'string' || Array.isArray(config.files)) ||
        config.files.length === 0) {
        throw new Error('No test files configured.');
    }
    if (!config.browsers) {
        throw new Error('No browsers specified.');
    }
    if (typeof config.protocol !== 'string') {
        throw new Error('No protocol specified.');
    }
    if (typeof config.hostname !== 'string') {
        throw new Error('No hostnames specified.');
    }
    if (typeof config.port !== 'number') {
        throw new Error('No port specified.');
    }
    if (typeof config.rootDir !== 'string') {
        throw new Error('No rootDir specified.');
    }
    return config;
}
exports.validateCoreConfig = validateCoreConfig;
async function readConfig(cliArgsConfig = {}) {
    try {
        const fileConfig = await config_loader_1.readConfig('web-test-runner.config', typeof cliArgsConfig.config === 'string' ? cliArgsConfig.config : undefined);
        const config = Object.assign(Object.assign(Object.assign({}, defaultBaseConfig), fileConfig), cliArgsConfig);
        if (!config.logger) {
            config.logger = new TestRunnerLogger_1.TestRunnerLogger();
        }
        if (typeof config.rootDir === 'string') {
            config.rootDir = path_1.default.resolve(config.rootDir);
        }
        if (config.coverageConfig) {
            config.coverageConfig = deepmerge_1.default(defaultCoverageConfig, config.coverageConfig);
        }
        else {
            config.coverageConfig = defaultCoverageConfig;
        }
        if (typeof config.port !== 'number') {
            const port = 9000 + Math.floor(Math.random() * 1000);
            config.port = await portfinder_1.getPortPromise({ port });
        }
        return config;
    }
    catch (error) {
        if (error instanceof config_loader_1.ConfigLoaderError) {
            console.error(chalk_1.default.red(`\n${error.message}\n`));
            process.exit(1);
        }
        throw error;
    }
}
exports.readConfig = readConfig;
//# sourceMappingURL=readConfig.js.map