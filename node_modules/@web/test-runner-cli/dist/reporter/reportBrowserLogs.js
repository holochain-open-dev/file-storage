"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportBrowserLogs = void 0;
const browser_logs_1 = require("@web/browser-logs");
const formatStackTrace_1 = require("../utils/formatStackTrace");
/**
 * Transforms logs, resolving stack traces in errors.
 */
function transformLogArgs(logArgs, userAgent, rootDir, stackLocationRegExp, sourceMapFunction) {
    return logArgs.map(log => {
        if (log == null) {
            return log;
        }
        if (log[browser_logs_1.MARKER_BROWSER_ERROR]) {
            const error = log;
            if (!error.stack) {
                return error.message;
            }
            return formatStackTrace_1.formatStackTrace(log, userAgent, rootDir, stackLocationRegExp, sourceMapFunction);
        }
        return log;
    });
}
async function reportBrowserLogs(logger, sessions, rootDir, stackLocationRegExp, sourceMapFunction) {
    const commonLogs = [];
    const commonStringified = [];
    const logsByBrowser = new Map();
    const allStringified = sessions.map(s => JSON.stringify(s.logs));
    for (const session of sessions) {
        for (const args of session.logs) {
            // for the first session, we always include all logs
            // for others we deduplicate logs, this way we can allow the same log
            // msg appearing multiple times while also deduplicating common logs
            // between browsers
            const stringifiedArgs = JSON.stringify(args);
            if (args.length > 0 &&
                (session === sessions[0] || !commonStringified.includes(stringifiedArgs))) {
                if (allStringified.every(logs => logs.includes(stringifiedArgs))) {
                    commonLogs.push({ userAgent: session.userAgent, args });
                    commonStringified.push(stringifiedArgs);
                }
                else {
                    let logsForBrowser = logsByBrowser.get(session.browser.name);
                    if (!logsForBrowser) {
                        logsForBrowser = [];
                        logsByBrowser.set(session.browser.name, logsForBrowser);
                    }
                    logsForBrowser.push({ userAgent: session.userAgent, args });
                }
            }
        }
    }
    if (commonLogs.length > 0) {
        logger.log(` ðŸš§ Browser logs:`);
        logger.group();
        logger.group();
        logger.group();
        for (const { userAgent, args } of commonLogs) {
            const transformedArgs = await Promise.all(transformLogArgs(args, userAgent, rootDir, stackLocationRegExp, sourceMapFunction));
            logger.log(...transformedArgs);
        }
        logger.groupEnd();
        logger.groupEnd();
        logger.groupEnd();
    }
    for (const [browser, logs] of logsByBrowser) {
        logger.log(` ðŸš§ Browser logs on ${browser}:`);
        logger.group();
        logger.group();
        logger.group();
        for (const { userAgent, args } of logs) {
            const transformedArgs = await Promise.all(transformLogArgs(args, userAgent, rootDir, stackLocationRegExp, sourceMapFunction));
            logger.log(...transformedArgs);
        }
        logger.groupEnd();
        logger.groupEnd();
        logger.groupEnd();
    }
    if (commonLogs.length > 0 || logsByBrowser.size > 0) {
        logger.log('');
    }
}
exports.reportBrowserLogs = reportBrowserLogs;
//# sourceMappingURL=reportBrowserLogs.js.map