"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportTestFileErrors = void 0;
const chalk_1 = __importDefault(require("chalk"));
const replaceRelativeStackFilePath_1 = require("../utils/replaceRelativeStackFilePath");
const getFailedOnBrowsers_1 = require("../utils/getFailedOnBrowsers");
const formatStackTrace_1 = require("../utils/formatStackTrace");
function isSameError(a, b) {
    return a.message === b.message && a.stack === b.stack;
}
async function reportTestFileErrors(logger, browserNames, favoriteBrowser, sessionsForTestFile, rootDir, stackLocationRegExp, sourceMapFunction) {
    const reports = [];
    for (const session of sessionsForTestFile) {
        for (const error of session.errors) {
            let report = reports.find(r => isSameError(r.error, error));
            if (!report) {
                report = {
                    testFile: session.testFile,
                    failedBrowsers: [],
                    error,
                    userAgent: session.userAgent,
                };
                reports.push(report);
            }
            report.failedBrowsers.push(session.browser.name);
            if (session.browser.name === favoriteBrowser) {
                report.error = error;
            }
        }
    }
    for (const report of reports) {
        const formattedStacktrace = await formatStackTrace_1.formatStackTrace(report.error, report.userAgent, rootDir, stackLocationRegExp, sourceMapFunction);
        if (formattedStacktrace) {
            const [first, ...rest] = formattedStacktrace.split('\n');
            const restStackString = rest.join('\n');
            // there was a stack trace, take the first line and decorate it with an icon and which browsers it failed on
            logger.log(` ❌ ${first} ${getFailedOnBrowsers_1.getFailedOnBrowsers(browserNames, report.failedBrowsers)}`);
            // if there was more to the stack trace, print it
            if (restStackString) {
                logger.group();
                logger.group();
                logger.log(chalk_1.default.red(restStackString));
                logger.groupEnd();
                logger.groupEnd();
            }
        }
        else {
            // there was no stack trace, so just print the error message
            const message = report.error.message
                ? await replaceRelativeStackFilePath_1.replaceRelativeStackFilePath(report.error.message, report.userAgent, rootDir, stackLocationRegExp, sourceMapFunction)
                : 'Unknown error';
            logger.log(` ❌ ${message} ${getFailedOnBrowsers_1.getFailedOnBrowsers(browserNames, report.failedBrowsers)}`);
        }
        logger.log('');
    }
}
exports.reportTestFileErrors = reportTestFileErrors;
//# sourceMappingURL=reportTestFileErrors.js.map